package {
	import flash.events.Event;
	import flash.events.IOErrorEvent;
	import flash.events.MouseEvent;
	import flash.events.SecurityErrorEvent;
	import flash.media.Sound;
	import flash.media.SoundChannel;
	import flash.net.URLLoader;
	import flash.net.URLRequest;
	import spark.components.Button;

	public class SampleController_2_NoTaskManager {
		
		private var _button:Button;
		private var _sound:Sound;
		private var _soundChannel:SoundChannel;
		private var _urlLoader:URLLoader;

		public function SampleController_2_NoTaskManager( button:Button ) {
			_button = button;
			_button.addEventListener ( MouseEvent.CLICK, onButtonClick );
		}

		// Helper methods
		private function addURLLoaderEventListeners():void {
			_urlLoader.addEventListener ( Event.COMPLETE, onURLLoaderComplete, false, 0, true );
			_urlLoader.addEventListener ( SecurityErrorEvent.SECURITY_ERROR, onURLLoaderSecurityError, false, 0, true );
			_urlLoader.addEventListener ( IOErrorEvent.IO_ERROR, onURLLoaderIOError, false, 0, true );
			_urlLoader.addEventListener ( IOErrorEvent.NETWORK_ERROR, onURLLoaderIOError, false, 0, true );
			_urlLoader.addEventListener ( IOErrorEvent.VERIFY_ERROR, onURLLoaderIOError, false, 0, true );
			_urlLoader.addEventListener ( IOErrorEvent.DISK_ERROR, onURLLoaderIOError, false, 0, true );
		}

		private function removeURLLoaderEventListeners():void {
			_urlLoader.removeEventListener ( SecurityErrorEvent.SECURITY_ERROR, onURLLoaderSecurityError, false, 0, true );
			_urlLoader.removeEventListener ( IOErrorEvent.IO_ERROR, onURLLoaderIOError, false, 0, true );
			_urlLoader.removeEventListener ( IOErrorEvent.NETWORK_ERROR, onURLLoaderIOError, false, 0, true );
			_urlLoader.removeEventListener ( IOErrorEvent.VERIFY_ERROR, onURLLoaderIOError, false, 0, true );
			_urlLoader.removeEventListener ( IOErrorEvent.DISK_ERROR, onURLLoaderIOError, false, 0, true );
		}

		// Event handlers
		private function onButtonClick( event:MouseEvent ):void {
			_button.enabled = false;
			
			_sound = new Sound();
			_sound.addEventListener ( Event.COMPLETE, onSoundComplete );
			_sound.addEventListener ( IOErrorEvent.IO_ERROR, onSoundIOError );
			_sound.load ( new URLRequest ( "fake_sound_url" ));
		}

		private function onSoundIOError( event:IOErrorEvent ):void {
			_sound.removeEventListener ( Event.COMPLETE, onSoundComplete );
			_sound.removeEventListener ( IOErrorEvent.IO_ERROR, onSoundIOError );
			
			// Handle error
		}

		private function onSoundComplete( event:Event ):void {
			_sound.removeEventListener ( Event.COMPLETE, onSoundComplete );
			_sound.removeEventListener ( IOErrorEvent.IO_ERROR, onSoundIOError );
			
			_urlLoader = new URLLoader();
			
			addURLLoaderEventListeners();
			
			_urlLoader.load ( new URLRequest ( "fake_url_for_sound_start" ));
		}

		private function onURLLoaderSecurityError( event:SecurityErrorEvent ):void {
			removeURLLoaderEventListeners();
			
			// Handle error
		}

		private function onURLLoaderIOError( event:IOErrorEvent ):void {
			removeURLLoaderEventListeners();
			
			// Handle error
		}

		private function onURLLoaderComplete( event:Event ):void {
			removeURLLoaderEventListeners();
			
			_urlLoader = null;

			// HACK: This is a dirty HACK to reuse event handlers.
			if ( _sound ) {
				_soundChannel = _sound.play();
				_soundChannel.addEventListener ( Event.SOUND_COMPLETE, onSoundComplete );
				
			} else {
				_button.enabled = true;
			}
		}

		private function onSoundComplete( event:Event ):void {
			_soundChannel.removeEventListener ( Event.SOUND_COMPLETE, onSoundComplete );
			_soundChannel = null;
			
			_sound = null;
			
			_urlLoader = new URLLoader();
			
			addURLLoaderEventListeners();
			
			_urlLoader.load ( new URLRequest ( "fake_url_for_sound_finished" ));
		}
	}
}