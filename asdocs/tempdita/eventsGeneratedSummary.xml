<?xml version="1.0" encoding="UTF-8"?>
<allClasses>
   <apiPackage id="com.rosettastone.library.taskmanager.events">
      <apiName>com.rosettastone.library.taskmanager.events</apiName>
      <apiClassifier id="com.rosettastone.library.taskmanager.events:TaskEvent">
         <apiName>TaskEvent</apiName>
         <shortdesc>
	 Dispatched by a Task to indicated a change in state.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>flash.events:Event</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Dispatched by a Task to indicated a change in state.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="com.rosettastone.library.taskmanager.events:TaskManagerEvent">
         <apiName>TaskManagerEvent</apiName>
         <shortdesc>
	 Dispatched by TaskManager to indicate a change in state.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>flash.events:Event</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Dispatched by TaskManager to indicate a change in state.
	 </apiDesc>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="com.rosettastone.library.taskmanager">
      <apiName>com.rosettastone.library.taskmanager</apiName>
      <apiClassifier id="com.rosettastone.library.taskmanager:IInterruptibleTask">
         <apiName>IInterruptibleTask</apiName>
         <shortdesc>
	 An interruptible Task can be paused and resumed after being run.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>com.rosettastone.library.taskmanager:ITask</apiBaseInterface>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 An interruptible Task can be paused and resumed after being run.
	 
	 Pausing a non-running Task should have no effect.
	 Resuming a non-interrupted Task should have no effect.
	 </apiDesc>
         <adobeApiEvent id="com.rosettastone.library.taskmanager:IInterruptibleTask_com.rosettastone.library.taskmanager.events.TaskEvent_taskEventInterrupted">
            <apiName>taskEventInterrupted</apiName>
            <shortdesc/>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <adobeApiEventClassifier>com.rosettastone.library.taskmanager.events.TaskEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc/>
            </adobeApiEventDetail>
         </adobeApiEvent>
      </apiClassifier>
      <apiClassifier id="com.rosettastone.library.taskmanager:TaskWithTimeout">
         <apiName>TaskWithTimeout</apiName>
         <shortdesc>
	 Decorates a Task and enforces a max-execution time limit.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>com.rosettastone.library.taskmanager:IDecoratorTask</apiBaseInterface>
               <apiBaseClassifier>com.rosettastone.library.taskmanager:InterruptibleTask</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Decorates a Task and enforces a max-execution time limit.
	 If specified time interval elapses before the decorated Task has complete it is considered to be an error.
	 The decorated Task will be interrupted (if possible) in that event.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="com.rosettastone.library.taskmanager:IDecoratorTask">
         <apiName>IDecoratorTask</apiName>
         <shortdesc>
	 Special interface for tasks that decorate other tasks.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>com.rosettastone.library.taskmanager:ITask</apiBaseInterface>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Special interface for tasks that decorate other tasks.
	 This interface can assist external code in getting to the lowest-level failing task in the event of an error.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="com.rosettastone.library.taskmanager:URLRequestTask">
         <apiName>URLRequestTask</apiName>
         <shortdesc>
	 Task that loads a URLRequest and exposes the URLLoader's "urlLoaderData" upon success.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>com.rosettastone.library.taskmanager:InterruptibleTask</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Task that loads a URLRequest and exposes the URLLoader's "urlLoaderData" upon success.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="com.rosettastone.library.taskmanager:SynchronousTaskWithClosure">
         <apiName>SynchronousTaskWithClosure</apiName>
         <shortdesc/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>com.rosettastone.library.taskmanager:ISynchronousTask</apiBaseInterface>
               <apiBaseInterface>com.rosettastone.library.taskmanager:IInterruptibleTask</apiBaseInterface>
               <apiBaseClassifier>com.rosettastone.library.taskmanager:TaskWithClosure</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
      </apiClassifier>
      <apiClassifier id="com.rosettastone.library.taskmanager:AbstractTaskManager">
         <apiName>AbstractTaskManager</apiName>
         <shortdesc>
	 This is an abstract class and should not be instantiated directly.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>com.rosettastone.library.taskmanager:Task</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 This is an abstract class and should not be instantiated directly.
	 Instead use one of the following sub-classes: TaskManager, InterruptibleTaskManager
	 </apiDesc>
         <adobeApiEvent id="com.rosettastone.library.taskmanager:AbstractTaskManager_com.rosettastone.library.taskmanager.events.TaskManagerEvent_taskManagerEventInterrupted">
            <apiName>taskManagerEventInterrupted</apiName>
            <shortdesc/>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <adobeApiEventClassifier>com.rosettastone.library.taskmanager.events.TaskManagerEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc/>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="com.rosettastone.library.taskmanager:AbstractTaskManager_com.rosettastone.library.taskmanager.events.TaskManagerEvent_taskManagerEventError">
            <apiName>taskManagerEventError</apiName>
            <shortdesc/>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <adobeApiEventClassifier>com.rosettastone.library.taskmanager.events.TaskManagerEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc/>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="com.rosettastone.library.taskmanager:AbstractTaskManager_com.rosettastone.library.taskmanager.events.TaskManagerEvent_taskManagerEventComplete">
            <apiName>taskManagerEventComplete</apiName>
            <shortdesc/>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <adobeApiEventClassifier>com.rosettastone.library.taskmanager.events.TaskManagerEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc/>
            </adobeApiEventDetail>
         </adobeApiEvent>
      </apiClassifier>
      <apiClassifier id="com.rosettastone.library.taskmanager:InterruptibleCompositeTask">
         <apiName>InterruptibleCompositeTask</apiName>
         <shortdesc>
	 Wraps a set of IInterruptibleTask (or ISynchronousTask) and executes them in parallel or serial, as specified by a boolean constructor arg.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>com.rosettastone.library.taskmanager:IInterruptibleTask</apiBaseInterface>
               <apiBaseClassifier>com.rosettastone.library.taskmanager:AbstractCompositeTask</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Wraps a set of IInterruptibleTask (or ISynchronousTask) and executes them in parallel or serial, as specified by a boolean constructor arg.
	 Interruptable composite task designed to be paused and resumed gracefully and automatically handles interrupting and resuming all child tasks.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="com.rosettastone.library.taskmanager:WaitTask">
         <apiName>WaitTask</apiName>
         <shortdesc>
	 Task that delays for a specified time before completion.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>com.rosettastone.library.taskmanager:InterruptibleTask</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Task that delays for a specified time before completion.
	 
	 This task supports interruption as well as resume.
	 Upon resuming an interrupted Wait this Task can either re-start the Timer at the beginning or resume from the interrupted point.
	 This behavior can be controlled via the constructor parameter "restartTimerAfterInterruption".
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="com.rosettastone.library.taskmanager:ISynchronousTask">
         <apiName>ISynchronousTask</apiName>
         <shortdesc>
	 A synchronous Task is one that completes immediately upon being run.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>com.rosettastone.library.taskmanager:ITask</apiBaseInterface>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 A synchronous Task is one that completes immediately upon being run.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="com.rosettastone.library.taskmanager:TaskManager">
         <apiName>TaskManager</apiName>
         <shortdesc>
	 Manages execution of a set of ITasks.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>com.rosettastone.library.taskmanager:AbstractTaskManager</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Manages execution of a set of ITasks.
	 Tasks may specify blocking depencies on other tasks.
	 	 This class will wrap all TaskEvents and dispatch TaskManagerEvent.COMPLETE only once all Tasks have completed.
	 If a task errors, this class will dispatch a TaskManagerEvent.ERROR event and halt running any additional tasks.
	 </apiDesc>
         <adobeApiEvent id="com.rosettastone.library.taskmanager:TaskManager_com.rosettastone.library.taskmanager.events.TaskManagerEvent_taskManagerEventInterrupted">
            <apiName>taskManagerEventInterrupted</apiName>
            <shortdesc/>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <adobeApiEventClassifier>com.rosettastone.library.taskmanager.events.TaskManagerEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc/>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="com.rosettastone.library.taskmanager:TaskManager_com.rosettastone.library.taskmanager.events.TaskManagerEvent_taskManagerEventError">
            <apiName>taskManagerEventError</apiName>
            <shortdesc/>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <adobeApiEventClassifier>com.rosettastone.library.taskmanager.events.TaskManagerEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc/>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="com.rosettastone.library.taskmanager:TaskManager_com.rosettastone.library.taskmanager.events.TaskManagerEvent_taskManagerEventComplete">
            <apiName>taskManagerEventComplete</apiName>
            <shortdesc/>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <adobeApiEventClassifier>com.rosettastone.library.taskmanager.events.TaskManagerEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc/>
            </adobeApiEventDetail>
         </adobeApiEvent>
      </apiClassifier>
      <apiClassifier id="com.rosettastone.library.taskmanager:InterruptibleTaskManager">
         <apiName>InterruptibleTaskManager</apiName>
         <shortdesc>
	 Manages execution of a set of IInterruptibleTasks.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>com.rosettastone.library.taskmanager:IInterruptibleTask</apiBaseInterface>
               <apiBaseClassifier>com.rosettastone.library.taskmanager:AbstractTaskManager</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Manages execution of a set of IInterruptibleTasks.
	 Tasks may specify blocking depencies on other tasks.
	 	 This class will wrap all TaskEvents and dispatch TaskManagerEvent.COMPLETE only once all Tasks have completed.
	 If a task errors, this class will dispatch a TaskManagerEvent.ERROR event and halt running any additional tasks.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="com.rosettastone.library.taskmanager:TaskManagerComponentInfo">
         <apiName>TaskManagerComponentInfo</apiName>
         <shortdesc>
	 Used for retrieving information about the TaskManager component.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Used for retrieving information about the TaskManager component.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="com.rosettastone.library.taskmanager:CompositeTask">
         <apiName>CompositeTask</apiName>
         <shortdesc>
	 Wraps a set of ITasks and executes them in parallel or serial, as specified by a boolean constructor arg.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>com.rosettastone.library.taskmanager:AbstractCompositeTask</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Wraps a set of ITasks and executes them in parallel or serial, as specified by a boolean constructor arg.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="com.rosettastone.library.taskmanager:RetryOnFailureDecoratorTask">
         <apiName>RetryOnFailureDecoratorTask</apiName>
         <shortdesc>
	 Special Task decorator for Tasks that should be retried on failure.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>com.rosettastone.library.taskmanager:IDecoratorTask</apiBaseInterface>
               <apiBaseClassifier>com.rosettastone.library.taskmanager:InterruptibleTask</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Special Task decorator for Tasks that should be retried on failure.
	 (For example, this could be useful for Tasks that rely on an internet connection in order to complete.)
	 
	 This task allows its decorated Task to fail a couple of times before bubbling the error.
	 A small amount of time is allowed to pass between each retry.
	 This delay allows time for an external monitor to detect a loss of internet connection and pause all Tasks until it is restored.
	 It also allows for a more graceful handling of occasional HTTP failures.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="com.rosettastone.library.taskmanager:InterruptibleTask">
         <apiName>InterruptibleTask</apiName>
         <shortdesc>
	 Abstract inerruptible Task.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>com.rosettastone.library.taskmanager:IInterruptibleTask</apiBaseInterface>
               <apiBaseClassifier>com.rosettastone.library.taskmanager:Task</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Abstract inerruptible Task.
	 Extend this class and override the customInterrupt() method to support interruptibility.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="com.rosettastone.library.taskmanager:PlaySoundTask">
         <apiName>PlaySoundTask</apiName>
         <shortdesc>
	 Task that plays a Sound and completes when the sound has finished playing.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>com.rosettastone.library.taskmanager:InterruptibleTask</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Task that plays a Sound and completes when the sound has finished playing.
	 This Task expects that the Sound object provided has already been loaded.
	 
	 This task supports interruption as well as resume.
	 Upon resuming an interrupted Sound this Task can either re-start playback at the beginning or resume from the interrupted point.
	 This behavior can be controlled via the constructor parameter "restartSoundAfterInterruption".
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="com.rosettastone.library.taskmanager:WaitForUIInitialization">
         <apiName>WaitForUIInitialization</apiName>
         <shortdesc>
	 Convenience task for waiting until a specified UIComponent has initialized.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>com.rosettastone.library.taskmanager:InterruptibleTask</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Convenience task for waiting until a specified UIComponent has initialized.
	 This can be useful if app initialization (business logic) also depends on UI initialization.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="com.rosettastone.library.taskmanager:StubTask">
         <apiName>StubTask</apiName>
         <shortdesc>
	 Empty Task useful primarily for unit testing.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>com.rosettastone.library.taskmanager:Task</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Empty Task useful primarily for unit testing.
	 It can also be useful in factory situations when a default no-op behavior is desired.
	 If certain implementations wish to provide behavior they can replace the placeholder Stub task with one that does work.
	 
	 This Task can be configured to auto-complete when it is executed.
	 Otherwise it will not complete or error unless/until specifically told to do so.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="com.rosettastone.library.taskmanager:AbstractCompositeTask">
         <apiName>AbstractCompositeTask</apiName>
         <shortdesc>
	 This is an abstract class and should not be instantiated directly.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>com.rosettastone.library.taskmanager:Task</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 This is an abstract class and should not be instantiated directly.
	 Instead use one of the following sub-classes: CompositeTask, InterruptibleCompositeTask
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="com.rosettastone.library.taskmanager:ITask">
         <apiName>ITask</apiName>
         <shortdesc>
	 A Task represents a job.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 A Task represents a job.
	 This job can be synchronous or asynchronous.
	 It can be a simple operation or a composite of other Tasks.
	 This interface defines the minimum API that must be implemented by a Task within the Task Manager framework.
	 </apiDesc>
         <adobeApiEvent id="com.rosettastone.library.taskmanager:ITask_flash.events.ProgressEvent_progress">
            <apiName>progress</apiName>
            <shortdesc/>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <adobeApiEventClassifier>flash.events.ProgressEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc/>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="com.rosettastone.library.taskmanager:ITask_com.rosettastone.library.taskmanager.events.TaskEvent_taskEventStarted">
            <apiName>taskEventStarted</apiName>
            <shortdesc/>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <adobeApiEventClassifier>com.rosettastone.library.taskmanager.events.TaskEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc/>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="com.rosettastone.library.taskmanager:ITask_com.rosettastone.library.taskmanager.events.TaskEvent_taskEventFinal">
            <apiName>taskEventFinal</apiName>
            <shortdesc/>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <adobeApiEventClassifier>com.rosettastone.library.taskmanager.events.TaskEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc/>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="com.rosettastone.library.taskmanager:ITask_com.rosettastone.library.taskmanager.events.TaskEvent_taskEventError">
            <apiName>taskEventError</apiName>
            <shortdesc/>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <adobeApiEventClassifier>com.rosettastone.library.taskmanager.events.TaskEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc/>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="com.rosettastone.library.taskmanager:ITask_com.rosettastone.library.taskmanager.events.TaskEvent_taskEventComplete">
            <apiName>taskEventComplete</apiName>
            <shortdesc/>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <adobeApiEventClassifier>com.rosettastone.library.taskmanager.events.TaskEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc/>
            </adobeApiEventDetail>
         </adobeApiEvent>
      </apiClassifier>
      <apiClassifier id="com.rosettastone.library.taskmanager:SleepTask">
         <apiName>SleepTask</apiName>
         <shortdesc>
	 Sleeps until told to complete.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>com.rosettastone.library.taskmanager:InterruptibleTask</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Sleeps until told to complete.
	 This Task can be inserted into a composite to block for an indeterminate amount of time.
	 Since this Task is simple a placeholder, it supports interruptibility.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="com.rosettastone.library.taskmanager:FactoryTask">
         <apiName>FactoryTask</apiName>
         <shortdesc>
	 Decorates a Task returned by the specified factory method.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>com.rosettastone.library.taskmanager:IDecoratorTask</apiBaseInterface>
               <apiBaseClassifier>com.rosettastone.library.taskmanager:InterruptibleTask</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Decorates a Task returned by the specified factory method.
	 This Task does not invoke the provided factory method until it is actually executed.
	 This allows for just-in-time evaluation of data set by previous Tasks.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="com.rosettastone.library.taskmanager:InnocuousTaskDecorator">
         <apiName>InnocuousTaskDecorator</apiName>
         <shortdesc>
	 Decorates a Task but re-dispatches both error and success events as success.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>com.rosettastone.library.taskmanager:IDecoratorTask</apiBaseInterface>
               <apiBaseClassifier>com.rosettastone.library.taskmanager:InterruptibleTask</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Decorates a Task but re-dispatches both error and success events as success.
	 This type of decorator should be used for Tasks that are required and are blocking, but should not be considered fatal in the event of a failure.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="com.rosettastone.library.taskmanager:Task">
         <apiName>Task</apiName>
         <shortdesc>
	 This class is meant to encapsulate a single, self-contained job.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>com.rosettastone.library.taskmanager:ITask</apiBaseInterface>
               <apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 This class is meant to encapsulate a single, self-contained job.
	 Each instance can have 0+ dependencies in the form of other tasks.
	 
	 To create a usable Task, extend this class and override the customRun() method.
	 Your Task should call taskComplete() or taskError() when it has completed or failed.
	 </apiDesc>
         <adobeApiEvent id="com.rosettastone.library.taskmanager:Task_flash.events.ProgressEvent_progress">
            <apiName>progress</apiName>
            <shortdesc/>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <adobeApiEventClassifier>flash.events.ProgressEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc/>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="com.rosettastone.library.taskmanager:Task_com.rosettastone.library.taskmanager.events.TaskEvent_taskEventInterrupted">
            <apiName>taskEventInterrupted</apiName>
            <shortdesc/>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <adobeApiEventClassifier>com.rosettastone.library.taskmanager.events.TaskEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc/>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="com.rosettastone.library.taskmanager:Task_com.rosettastone.library.taskmanager.events.TaskEvent_taskEventStarted">
            <apiName>taskEventStarted</apiName>
            <shortdesc/>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <adobeApiEventClassifier>com.rosettastone.library.taskmanager.events.TaskEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc/>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="com.rosettastone.library.taskmanager:Task_com.rosettastone.library.taskmanager.events.TaskEvent_taskEventFinal">
            <apiName>taskEventFinal</apiName>
            <shortdesc/>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <adobeApiEventClassifier>com.rosettastone.library.taskmanager.events.TaskEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc/>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="com.rosettastone.library.taskmanager:Task_com.rosettastone.library.taskmanager.events.TaskEvent_taskEventError">
            <apiName>taskEventError</apiName>
            <shortdesc/>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <adobeApiEventClassifier>com.rosettastone.library.taskmanager.events.TaskEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc/>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="com.rosettastone.library.taskmanager:Task_com.rosettastone.library.taskmanager.events.TaskEvent_taskEventComplete">
            <apiName>taskEventComplete</apiName>
            <shortdesc/>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <adobeApiEventClassifier>com.rosettastone.library.taskmanager.events.TaskEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc/>
            </adobeApiEventDetail>
         </adobeApiEvent>
      </apiClassifier>
      <apiClassifier id="com.rosettastone.library.taskmanager:EventHandlingTask">
         <apiName>EventHandlingTask</apiName>
         <shortdesc>
	 Convenience Task that listens to an IEventDispatcher for either a success or failure type event.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>com.rosettastone.library.taskmanager:InterruptibleTask</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Convenience Task that listens to an IEventDispatcher for either a success or failure type event.
	 
	 This Task can be used within a composite to block on the dispatching of an event.
	 It saves users from creating custom Tasks just to handle event listening.
	 
	 This task can be interrupted, though interrupting it will not stop (or affect) the IEventDispatcher it monitors.
	 Events dispatched while this task is in an interrupted state will be queued and handled when the task is resumed.
	 
	 If multiple Events are dispatched, only the first one will be responded-to / observed.
	 
	 Upon completion of this Task the Event that triggered the completion will be accessible via the "data" propery.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="com.rosettastone.library.taskmanager:ObserverTask">
         <apiName>ObserverTask</apiName>
         <shortdesc>
	 Observes (but does not execute) a collection of Tasks.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>com.rosettastone.library.taskmanager:Task</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Observes (but does not execute) a collection of Tasks.
	 This task can be used to monitor the execution of 1 or more running Tasks.
	 Tasks can be added (or removed) while the observer is running.
	 It will complete only once all observed Tasks has completed.
	 
	 If any of the observed Tasks errors, the observer will error as well if failUponError is TRUE. 
	 In this case the observer will re-dispatch the "data" and "message" properties of the first Task to fail. 
	 If failUponError is FALSE, observed Task errors and complets will be treated the same.
	 
	 If this Task is executed with no observed Tasks it will instantly complete.
	 The same is true if all of its observed Tasks have already completed by the time it has been executed.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="com.rosettastone.library.taskmanager:InterruptibleStubTask">
         <apiName>InterruptibleStubTask</apiName>
         <shortdesc>
	 Interruptible stub Task primarily intended for use in the context of automated tests.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>com.rosettastone.library.taskmanager:InterruptibleTask</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Interruptible stub Task primarily intended for use in the context of automated tests.
	 This Task does nothing when run (nor when interrupted) other than increment the Task counter.
	 It can be manually completed or errored at any point using the <codeph>complete</codeph> and <codeph>error</codeph> methods.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="com.rosettastone.library.taskmanager:SynchronousTask">
         <apiName>SynchronousTask</apiName>
         <shortdesc>
	 Synchronous Task for convenience sub-class purposes.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>com.rosettastone.library.taskmanager:ISynchronousTask</apiBaseInterface>
               <apiBaseInterface>com.rosettastone.library.taskmanager:IInterruptibleTask</apiBaseInterface>
               <apiBaseClassifier>com.rosettastone.library.taskmanager:Task</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Synchronous Task for convenience sub-class purposes.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="com.rosettastone.library.taskmanager:TaskWithClosure">
         <apiName>TaskWithClosure</apiName>
         <shortdesc>
	 Task that invokes a specified function upon execution.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>com.rosettastone.library.taskmanager:Task</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Task that invokes a specified function upon execution.
	 The function invoked will retain the scope of where it was defined, allowing for easy access to other class/method variables.
	 
	 This type of Task can be asynchronous.
	 It will not complete (or error) until specifically instructed to do so.
	 This instruction should be triggered as a result of the custom function it executes.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="com.rosettastone.library.taskmanager:InterruptibleDecoratorTask">
         <apiName>InterruptibleDecoratorTask</apiName>
         <shortdesc>
	 Decorates a non-interruptible Task and adds interruptible-like behavior.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>com.rosettastone.library.taskmanager:IDecoratorTask</apiBaseInterface>
               <apiBaseClassifier>com.rosettastone.library.taskmanager:InterruptibleTask</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Decorates a non-interruptible Task and adds interruptible-like behavior.
	 This task does not actually stop and resume the decorated Task,
	 But it does prevent ERROR or COMPLETE events from being dispatched when in an interrupted state.
	 Should ERROR or COMPLETE occur while interrupted they will be re-dispatched upon resume.
	 
	 This Task-type also re-dispatches any ProgressEvents dispatched by the decorated Task.
	 </apiDesc>
      </apiClassifier>
   </apiPackage>
</allClasses>