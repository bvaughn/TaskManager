<?xml version="1.0" encoding="UTF-8"?><apiPackage id="com.rosettastone.library.taskmanager"><apiName>com.rosettastone.library.taskmanager</apiName><apiDetail/><apiClassifier id="com.rosettastone.library.taskmanager:IInterruptibleTask"><apiName>IInterruptibleTask</apiName><shortdesc>
	 An interruptible Task can be paused and resumed after being run.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>com.rosettastone.library.taskmanager:ITask</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 An interruptible Task can be paused and resumed after being run.
	 
	 Pausing a non-running Task should have no effect.
	 Resuming a non-interrupted Task should have no effect.
	 </apiDesc></apiClassifierDetail><adobeApiEvent id="com.rosettastone.library.taskmanager:IInterruptibleTask_com.rosettastone.library.taskmanager.events.TaskEvent_taskEventInterrupted"><apiName>taskEventInterrupted</apiName><shortdesc/><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>com.rosettastone.library.taskmanager.events.TaskEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc></apiDesc></adobeApiEventDetail></adobeApiEvent><apiOperation id="com.rosettastone.library.taskmanager:IInterruptibleTask:com.rosettastone.library.taskmanager:IInterruptibleTask:disconnectFromInterruptingTask"><apiName>disconnectFromInterruptingTask</apiName><shortdesc>
		 If an interrupting-Task has been provided (via interruptForTask) this Task will automatically resume when it completes.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 If an interrupting-Task has been provided (via interruptForTask) this Task will automatically resume when it completes.
		 This method to cancels that behavior by removing references and event listeners.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:IInterruptibleTask:com.rosettastone.library.taskmanager:IInterruptibleTask:interruptForTask"><apiName>interruptForTask</apiName><shortdesc>
		 Interrupts the current Task to wait on the Task specified.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>TRUE if the Task has been successfully interrupted
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>interruptingTask</apiItemName><apiOperationClassifier>com.rosettastone.library.taskmanager:ITask</apiOperationClassifier><apiDesc>Task
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Interrupts the current Task to wait on the Task specified.
		 Once this Task dispatches a TaskEvent.COMPLETE event, this Task will resume.
		 If the specified Task dispatches a TaskEvent.ERROR event this Task will also error.
		 TaskEvent.INTERRUPTED events are ignored.
		 
		 If this method is called once with a Task and then called again before that Task has completed,
		 Event listeners will be removed from the first Task and added to the second one.
		 There can only be 1 active interrupting Task at a time.
		 If this Task should be interrupted by more than one Task, a CompositeTask or ObserverTask should be used.
		 
		 If the specified interrupting Task is already running this method will simply add event listeners.
		 If it is not running this method will add event listeners but will rely on external code to run the interrupter.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:IInterruptibleTask:com.rosettastone.library.taskmanager:IInterruptibleTask:interrupt"><apiName>interrupt</apiName><shortdesc>
		 Interrupt the current Task.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>TRUE if the Task has been successfully interrupted
		 </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
		 Interrupt the current Task.
		 Interruptions should be handled in such a way as to allow a subsequent call to run() to resume gracefully.
		 
		 This mehtod should trigger an event of type TaskEvent.INTERRUPTED.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:IInterruptibleTask:com.rosettastone.library.taskmanager:IInterruptibleTask:withInterruptionHandler"><apiName>withInterruptionHandler</apiName><shortdesc>
		 Although Tasks dispatch TaskEvents to indicate interruption this method may also be used for notification purposes.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>com.rosettastone.library.taskmanager:ITask</apiOperationClassifier></apiReturn><apiParam><apiItemName>interruptionHandler</apiItemName><apiType value="Function"/><apiDesc>Function
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Although Tasks dispatch TaskEvents to indicate interruption this method may also be used for notification purposes.
		 The provided function will be invoked only upon interruption of the Task.
		 
		 This method may be called multiple times safely; each unique function specified will be executed once if the task interrupts.
		 
		 <p>
		 It should have one of the following signatures:
		 <pre>function( message:String = "", data:= null ):void</pre>
		 <pre>function():void</pre>
		 </p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.rosettastone.library.taskmanager:IInterruptibleTask:com.rosettastone.library.taskmanager:IInterruptibleTask:interruptingTask:get"><apiName>interruptingTask</apiName><shortdesc>
		 The Task currently interrupting the this Task's execution (or NULL if no such Task exists).</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>com.rosettastone.library.taskmanager:ITask</apiValueClassifier></apiValueDef><apiDesc>
		 The Task currently interrupting the this Task's execution (or NULL if no such Task exists).
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:IInterruptibleTask:com.rosettastone.library.taskmanager:IInterruptibleTask:isInterrupted:get"><apiName>isInterrupted</apiName><shortdesc>
		 The task has been interrupted and has not yet resumed.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 The task has been interrupted and has not yet resumed.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.rosettastone.library.taskmanager:TaskWithTimeout"><apiName>TaskWithTimeout</apiName><shortdesc>
	 Decorates a Task and enforces a max-execution time limit.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>com.rosettastone.library.taskmanager:IDecoratorTask</apiBaseInterface><apiBaseClassifier>com.rosettastone.library.taskmanager:InterruptibleTask</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Decorates a Task and enforces a max-execution time limit.
	 If specified time interval elapses before the decorated Task has complete it is considered to be an error.
	 The decorated Task will be interrupted (if possible) in that event.
	 </apiDesc></apiClassifierDetail><apiConstructor id="com.rosettastone.library.taskmanager:TaskWithTimeout:TaskWithTimeout"><apiName>TaskWithTimeout</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>taskToDecorate</apiItemName><apiOperationClassifier>com.rosettastone.library.taskmanager:ITask</apiOperationClassifier></apiParam><apiParam><apiItemName>timeout</apiItemName><apiType value="int"/><apiData>1000</apiData></apiParam><apiParam><apiItemName>taskIdentifier</apiItemName><apiType value="String"/><apiData>null</apiData></apiParam></apiConstructorDef></apiConstructorDetail></apiConstructor><apiOperation id="com.rosettastone.library.taskmanager:TaskWithTimeout:protected:customInterrupt"><apiName>customInterrupt</apiName><shortdesc>
		 
		 Sub-classes should override this method to implement interruption behavior (removing event listeners, pausing objects, etc.).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Sub-classes should override this method to implement interruption behavior (removing event listeners, pausing objects, etc.).
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:TaskWithTimeout:protected:customRun"><apiName>customRun</apiName><shortdesc>
		 
		 Override this method to give your Task functionality.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Override this method to give your Task functionality.
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.rosettastone.library.taskmanager:TaskWithTimeout:decoratedTask:get"><apiName>decoratedTask</apiName><shortdesc>
		 
		 Inner (decorated) Task.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>com.rosettastone.library.taskmanager:ITask</apiValueClassifier></apiValueDef><apiDesc>
		 
		 Inner (decorated) Task.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.rosettastone.library.taskmanager:IDecoratorTask"><apiName>IDecoratorTask</apiName><shortdesc>
	 Special interface for tasks that decorate other tasks.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>com.rosettastone.library.taskmanager:ITask</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 Special interface for tasks that decorate other tasks.
	 This interface can assist external code in getting to the lowest-level failing task in the event of an error.
	 </apiDesc></apiClassifierDetail><apiValue id="com.rosettastone.library.taskmanager:IDecoratorTask:com.rosettastone.library.taskmanager:IDecoratorTask:decoratedTask:get"><apiName>decoratedTask</apiName><shortdesc>
		 Inner (decorated) Task.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>com.rosettastone.library.taskmanager:ITask</apiValueClassifier></apiValueDef><apiDesc>
		 Inner (decorated) Task.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.rosettastone.library.taskmanager:URLRequestTask"><apiName>URLRequestTask</apiName><shortdesc>
	 Task that loads a URLRequest and exposes the URLLoader's "urlLoaderData" upon success.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>com.rosettastone.library.taskmanager:InterruptibleTask</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Task that loads a URLRequest and exposes the URLLoader's "urlLoaderData" upon success.
	 </apiDesc></apiClassifierDetail><apiConstructor id="com.rosettastone.library.taskmanager:URLRequestTask:URLRequestTask"><apiName>URLRequestTask</apiName><shortdesc>
		 Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>urlRequest</apiItemName><apiType value="flash.net:URLRequest"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>taskIdentifier</apiItemName><apiType value="String"/><apiData>null</apiData></apiParam></apiConstructorDef><apiDesc>
		 Constructor.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="com.rosettastone.library.taskmanager:URLRequestTask:protected:customInterrupt"><apiName>customInterrupt</apiName><shortdesc>
		 
		 Sub-classes should override this method to implement interruption behavior (removing event listeners, pausing objects, etc.).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Sub-classes should override this method to implement interruption behavior (removing event listeners, pausing objects, etc.).
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:URLRequestTask:protected:customRun"><apiName>customRun</apiName><shortdesc>
		 
		 Override this method to give your Task functionality.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Override this method to give your Task functionality.
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.rosettastone.library.taskmanager:URLRequestTask:urlLoaderData:get"><apiName>urlLoaderData</apiName><shortdesc>
		 Loaded data.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/></apiValueDef><apiDesc>
		 Loaded data.
		 This should only be accessed after the Task has completed.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.rosettastone.library.taskmanager:SynchronousTaskWithClosure"><apiName>SynchronousTaskWithClosure</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>com.rosettastone.library.taskmanager:ISynchronousTask</apiBaseInterface><apiBaseInterface>com.rosettastone.library.taskmanager:IInterruptibleTask</apiBaseInterface><apiBaseClassifier>com.rosettastone.library.taskmanager:TaskWithClosure</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="com.rosettastone.library.taskmanager:SynchronousTaskWithClosure:SynchronousTaskWithClosure"><apiName>SynchronousTaskWithClosure</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>customRunFunction</apiItemName><apiType value="Function"/><apiData>null</apiData></apiParam><apiParam><apiItemName>taskIdentifier</apiItemName><apiType value="String"/><apiData>null</apiData></apiParam></apiConstructorDef></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="com.rosettastone.library.taskmanager:AbstractTaskManager"><apiName>AbstractTaskManager</apiName><shortdesc>
	 This is an abstract class and should not be instantiated directly.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>com.rosettastone.library.taskmanager:Task</apiBaseClassifier></apiClassifierDef><apiDesc>
	 This is an abstract class and should not be instantiated directly.
	 Instead use one of the following sub-classes: TaskManager, InterruptibleTaskManager
	 </apiDesc></apiClassifierDetail><adobeApiEvent id="com.rosettastone.library.taskmanager:AbstractTaskManager_com.rosettastone.library.taskmanager.events.TaskManagerEvent_taskManagerEventInterrupted"><apiName>taskManagerEventInterrupted</apiName><shortdesc/><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>com.rosettastone.library.taskmanager.events.TaskManagerEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc></apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="com.rosettastone.library.taskmanager:AbstractTaskManager_com.rosettastone.library.taskmanager.events.TaskManagerEvent_taskManagerEventError"><apiName>taskManagerEventError</apiName><shortdesc/><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>com.rosettastone.library.taskmanager.events.TaskManagerEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc></apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="com.rosettastone.library.taskmanager:AbstractTaskManager_com.rosettastone.library.taskmanager.events.TaskManagerEvent_taskManagerEventComplete"><apiName>taskManagerEventComplete</apiName><shortdesc/><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>com.rosettastone.library.taskmanager.events.TaskManagerEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc></apiDesc></adobeApiEventDetail></adobeApiEvent><apiOperation id="com.rosettastone.library.taskmanager:AbstractTaskManager:protected:addTaskHelper"><apiName>addTaskHelper</apiName><shortdesc>
		 Adds a task to the graph and set its dependencies.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiException><apiDesc>if TaskManager has been configured for interruptible-mode and Task is not either interruptible or synchronous
		 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>task</apiItemName><apiOperationClassifier>com.rosettastone.library.taskmanager:ITask</apiOperationClassifier><apiDesc>Task to add to TaskManager
		 </apiDesc></apiParam><apiParam><apiItemName>dependencies</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>Array of Tasks that newly added Task depends on
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Adds a task to the graph and set its dependencies.
		 
		 If TaskManager is currently running and the specified Taks has invalid dependencies, an ERROR event will be dispatched immediately.
		 		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:AbstractTaskManager:protected:customReset"><apiName>customReset</apiName><shortdesc>
		 
		 Override this method to perform any custom reset operations.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Override this method to perform any custom reset operations.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:AbstractTaskManager:protected:customRun"><apiName>customRun</apiName><shortdesc>
		 
		 Override this method to give your Task functionality.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Override this method to give your Task functionality.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:AbstractTaskManager:interrupt"><apiName>interrupt</apiName><shortdesc>
		 
		 Interruptible tasks should override interrupt() and get interruptible() if they are interruptible.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Interruptible tasks should override interrupt() and get interruptible() if they are interruptible.
		 
		 If they are, they should fire a TaskEvent.INTERRUPTED to indicate successful interruption of the task.
		 
		 If the interrupting fails at runtime, this method returns false
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:AbstractTaskManager:protected:removeTaskHelper"><apiName>removeTaskHelper</apiName><shortdesc>
		 Removes a task from the task manager.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>taskToRemove</apiItemName><apiOperationClassifier>com.rosettastone.library.taskmanager:ITask</apiOperationClassifier><apiDesc>The task to remove
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a task from the task manager.
		 
		 If the TaskManager is running and this operation unblocks any of the remaining Tasks, they will be executed as a result of this removal.
		 		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.rosettastone.library.taskmanager:AbstractTaskManager:completed:get"><apiName>completed</apiName><shortdesc>
		 There are no pending or active Tasks.</shortdesc><prolog><asCustoms><internal>This method is left around for backwards compatibility purposes only.
		 </internal></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 There are no pending or active Tasks.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:AbstractTaskManager:errorDatas:get"><apiName>errorDatas</apiName><shortdesc>
		 Error datas from all inner Tasks that failed during execution.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
		 Error datas from all inner Tasks that failed during execution.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:AbstractTaskManager:errorMessages:get"><apiName>errorMessages</apiName><shortdesc>
		 Unique error messages from all inner Tasks that failed during execution.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
		 Unique error messages from all inner Tasks that failed during execution.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:AbstractTaskManager:erroredTasks:get"><apiName>erroredTasks</apiName><shortdesc>
		 Tasks that errored during execution.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
		 Tasks that errored during execution.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:AbstractTaskManager:interruptible:get"><apiName>interruptible</apiName><shortdesc>
		 
		 The current Task can be interrupted.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 
		 The current Task can be interrupted.
		 Invoking interrupt() for a Task that is not marked as interruptible may result in an error.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:AbstractTaskManager:numCompletedTasks:get"><apiName>numCompletedTasks</apiName><shortdesc>
		 Number of Tasks that have successfully completed execution.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 Number of Tasks that have successfully completed execution.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:AbstractTaskManager:numInternalOperationsCompleted:get"><apiName>numInternalOperationsCompleted</apiName><shortdesc>
		 
		 
		 Number of internal operations that have completed.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 
		 
		 Number of internal operations that have completed.
		 Sub-classes should override this method if containing a value &gt; 1;
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:AbstractTaskManager:numInternalOperations:get"><apiName>numInternalOperations</apiName><shortdesc>
		 
		 
		 Number of internal operations conducted by this task.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 
		 
		 Number of internal operations conducted by this task.
		 Sub-classes should override this method if containing a value &gt; 1;
		 
		 If value &gt; 1, task should dispatch ProgressEvent.PROGRESS events manually to indicate changes in numInternalOperationsCompleted.
		 If value == 1, task will automatically dispatching ProgressEvent.PROGRESS events.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:AbstractTaskManager:numTasks:get"><apiName>numTasks</apiName><shortdesc>
		 Number of Tasks to be executed by TaskManager.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 Number of Tasks to be executed by TaskManager.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:AbstractTaskManager:synchronous:get"><apiName>synchronous</apiName><shortdesc>
		 
		 
		 The current task can be executed synchronously.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 
		 
		 The current task can be executed synchronously.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.rosettastone.library.taskmanager:InterruptibleCompositeTask"><apiName>InterruptibleCompositeTask</apiName><shortdesc>
	 Wraps a set of IInterruptibleTask (or ISynchronousTask) and executes them in parallel or serial, as specified by a boolean constructor arg.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>com.rosettastone.library.taskmanager:IInterruptibleTask</apiBaseInterface><apiBaseClassifier>com.rosettastone.library.taskmanager:AbstractCompositeTask</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Wraps a set of IInterruptibleTask (or ISynchronousTask) and executes them in parallel or serial, as specified by a boolean constructor arg.
	 Interruptable composite task designed to be paused and resumed gracefully and automatically handles interrupting and resuming all child tasks.
	 
	 </apiDesc></apiClassifierDetail><apiConstructor id="com.rosettastone.library.taskmanager:InterruptibleCompositeTask:InterruptibleCompositeTask"><apiName>InterruptibleCompositeTask</apiName><shortdesc>
		 Constructor
		 
		 </shortdesc><prolog><asCustoms><para>taskIdentifier Human friendly identifier for Task
		 
		 </para></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>if tasksOrFunctions Array contains object that is not either an IInterruptibleTask, ISynchronousTask, or a Function
		 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiParam><apiItemName>tasksOrFunctions</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>Set of Tasks and/or functions to be executed
		 </apiDesc></apiParam><apiParam><apiItemName>executeTaskInParallel</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>When TRUE, execute all tasks and report if all succeed (COMPLETE) or not (ERROR)
		                              When FALSE, execute tasks in order.  Do not execute subsequent tasks if one fails.
		 </apiDesc></apiParam><apiParam><apiItemName>taskIdentifier</apiItemName><apiType value="String"/><apiData>null</apiData></apiParam></apiConstructorDef><apiDesc>
		 Constructor
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="com.rosettastone.library.taskmanager:InterruptibleCompositeTask:addSynchronousTask"><apiName>addSynchronousTask</apiName><shortdesc>
		 Adds another task to the internal set that this class will execute.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>task</apiItemName><apiOperationClassifier>com.rosettastone.library.taskmanager:ISynchronousTask</apiOperationClassifier></apiParam></apiOperationDef><apiDesc>
		 Adds another task to the internal set that this class will execute.
		 Additional tasks may be safely at any time (including while the CompositeTask is executing).
		 Tasks are added to the end, so in serial tasks, tasks added later will not be run if an earlier one fails.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:InterruptibleCompositeTask:addTask"><apiName>addTask</apiName><shortdesc>
		 Adds another task to the internal set that this class will execute.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>task</apiItemName><apiOperationClassifier>com.rosettastone.library.taskmanager:IInterruptibleTask</apiOperationClassifier></apiParam></apiOperationDef><apiDesc>
		 Adds another task to the internal set that this class will execute.
		 Additional tasks may be safely at any time (including while the CompositeTask is executing).
		 Tasks are added to the end, so in serial tasks, tasks added later will not be run if an earlier one fails.
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="com.rosettastone.library.taskmanager:WaitTask"><apiName>WaitTask</apiName><shortdesc>
	 Task that delays for a specified time before completion.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>com.rosettastone.library.taskmanager:InterruptibleTask</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Task that delays for a specified time before completion.
	 
	 This task supports interruption as well as resume.
	 Upon resuming an interrupted Wait this Task can either re-start the Timer at the beginning or resume from the interrupted point.
	 This behavior can be controlled via the constructor parameter "restartTimerAfterInterruption".
	 </apiDesc></apiClassifierDetail><apiConstructor id="com.rosettastone.library.taskmanager:WaitTask:WaitTask"><apiName>WaitTask</apiName><shortdesc>
		 Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>duration</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>Number of milliseconds Task should wait before completing
		 </apiDesc></apiParam><apiParam><apiItemName>restartTimerAfterInterruption</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Specifies the resume-after-interruption behavior
		 </apiDesc></apiParam><apiParam><apiItemName>taskIdentifier</apiItemName><apiType value="String"/><apiData>null</apiData></apiParam></apiConstructorDef><apiDesc>
		 Constructor.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="com.rosettastone.library.taskmanager:WaitTask:protected:customInterrupt"><apiName>customInterrupt</apiName><shortdesc>
		 </shortdesc><prolog><asCustoms><inheritDocs/></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:WaitTask:protected:customRun"><apiName>customRun</apiName><shortdesc>
		 </shortdesc><prolog><asCustoms><inheritDocs/></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.rosettastone.library.taskmanager:WaitTask:duration:get"><apiName>duration</apiName><shortdesc>
		 Number of milliseconds Task should wait before completing.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 Number of milliseconds Task should wait before completing.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.rosettastone.library.taskmanager:ISynchronousTask"><apiName>ISynchronousTask</apiName><shortdesc>
	 A synchronous Task is one that completes immediately upon being run.</shortdesc><prolog><asMetadata/><asCustoms><internal>This interface is a useful placeholder even though it does not define any additional API methods.
	 </internal></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>com.rosettastone.library.taskmanager:ITask</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 A synchronous Task is one that completes immediately upon being run.
	 
	 </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="com.rosettastone.library.taskmanager:TaskManager"><apiName>TaskManager</apiName><shortdesc>
	 Manages execution of a set of ITasks.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>com.rosettastone.library.taskmanager:AbstractTaskManager</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Manages execution of a set of ITasks.
	 Tasks may specify blocking depencies on other tasks.
	 	 This class will wrap all TaskEvents and dispatch TaskManagerEvent.COMPLETE only once all Tasks have completed.
	 If a task errors, this class will dispatch a TaskManagerEvent.ERROR event and halt running any additional tasks.
	 </apiDesc></apiClassifierDetail><adobeApiEvent id="com.rosettastone.library.taskmanager:TaskManager_com.rosettastone.library.taskmanager.events.TaskManagerEvent_taskManagerEventInterrupted"><apiName>taskManagerEventInterrupted</apiName><shortdesc/><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>com.rosettastone.library.taskmanager.events.TaskManagerEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc></apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="com.rosettastone.library.taskmanager:TaskManager_com.rosettastone.library.taskmanager.events.TaskManagerEvent_taskManagerEventError"><apiName>taskManagerEventError</apiName><shortdesc/><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>com.rosettastone.library.taskmanager.events.TaskManagerEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc></apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="com.rosettastone.library.taskmanager:TaskManager_com.rosettastone.library.taskmanager.events.TaskManagerEvent_taskManagerEventComplete"><apiName>taskManagerEventComplete</apiName><shortdesc/><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>com.rosettastone.library.taskmanager.events.TaskManagerEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc></apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="com.rosettastone.library.taskmanager:TaskManager:TaskManager"><apiName>TaskManager</apiName><shortdesc>
		 Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>interruptible</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Consider using InterruptibleTaskManager instead of this parameter.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="com.rosettastone.library.taskmanager:TaskManager:addTask"><apiName>addTask</apiName><shortdesc>
		 Adds a task to the graph and set its dependencies.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>if TaskManager has been configured for interruptible-mode and Task is not either interruptible or synchronous
		 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>task</apiItemName><apiOperationClassifier>com.rosettastone.library.taskmanager:ITask</apiOperationClassifier><apiDesc>Task to add to TaskManager
		 </apiDesc></apiParam><apiParam><apiItemName>dependencies</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>Array of Tasks that newly added Task depends on
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Adds a task to the graph and set its dependencies.
		 
		 If TaskManager is currently running and the specified Taks has invalid dependencies, an ERROR event will be dispatched immediately.
		 		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:TaskManager:removeTask"><apiName>removeTask</apiName><shortdesc>
		 Removes a task from the task manager.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>taskToRemove</apiItemName><apiOperationClassifier>com.rosettastone.library.taskmanager:ITask</apiOperationClassifier><apiDesc>The task to remove
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a task from the task manager.
		 
		 If the TaskManager is running and this operation unblocks any of the remaining Tasks, they will be executed as a result of this removal.
		 		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="com.rosettastone.library.taskmanager:InterruptibleTaskManager"><apiName>InterruptibleTaskManager</apiName><shortdesc>
	 Manages execution of a set of IInterruptibleTasks.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>com.rosettastone.library.taskmanager:IInterruptibleTask</apiBaseInterface><apiBaseClassifier>com.rosettastone.library.taskmanager:AbstractTaskManager</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Manages execution of a set of IInterruptibleTasks.
	 Tasks may specify blocking depencies on other tasks.
	 	 This class will wrap all TaskEvents and dispatch TaskManagerEvent.COMPLETE only once all Tasks have completed.
	 If a task errors, this class will dispatch a TaskManagerEvent.ERROR event and halt running any additional tasks.
	 </apiDesc></apiClassifierDetail><apiConstructor id="com.rosettastone.library.taskmanager:InterruptibleTaskManager:InterruptibleTaskManager"><apiName>InterruptibleTaskManager</apiName><shortdesc>
		 Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
		 Constructor.
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="com.rosettastone.library.taskmanager:InterruptibleTaskManager:addTask"><apiName>addTask</apiName><shortdesc>
		 Adds a task to the graph and set its dependencies.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>if TaskManager has been configured for interruptible-mode and Task is not either interruptible or synchronous
		 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>task</apiItemName><apiOperationClassifier>com.rosettastone.library.taskmanager:IInterruptibleTask</apiOperationClassifier><apiDesc>Task to add to TaskManager
		 </apiDesc></apiParam><apiParam><apiItemName>dependencies</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>Array of Tasks that newly added Task depends on
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Adds a task to the graph and set its dependencies.
		 
		 If TaskManager is currently running and the specified Taks has invalid dependencies, an ERROR event will be dispatched immediately.
		 		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:InterruptibleTaskManager:removeTask"><apiName>removeTask</apiName><shortdesc>
		 Removes a task from the task manager.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>taskToRemove</apiItemName><apiOperationClassifier>com.rosettastone.library.taskmanager:IInterruptibleTask</apiOperationClassifier><apiDesc>The task to remove
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a task from the task manager.
		 
		 If the TaskManager is running and this operation unblocks any of the remaining Tasks, they will be executed as a result of this removal.
		 		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="com.rosettastone.library.taskmanager:TaskManagerComponentInfo"><apiName>TaskManagerComponentInfo</apiName><shortdesc>
	 Used for retrieving information about the TaskManager component.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Used for retrieving information about the TaskManager component.
	 </apiDesc></apiClassifierDetail><apiOperation id="com.rosettastone.library.taskmanager:TaskManagerComponentInfo:getBuildVersion"><apiName>getBuildVersion</apiName><shortdesc>
		 Returns the build version number of this component.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="int"/></apiReturn></apiOperationDef><apiDesc>
		 Returns the build version number of this component.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:TaskManagerComponentInfo:getMajorVersion"><apiName>getMajorVersion</apiName><shortdesc>
		 Returns the major version number of this component.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="int"/></apiReturn></apiOperationDef><apiDesc>
		 Returns the major version number of this component.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:TaskManagerComponentInfo:getMinorVersion"><apiName>getMinorVersion</apiName><shortdesc>
		 Returns the minor version number of this component.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="int"/></apiReturn></apiOperationDef><apiDesc>
		 Returns the minor version number of this component.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:TaskManagerComponentInfo:getVersionString"><apiName>getVersionString</apiName><shortdesc>
		 Returns a string with the three version numbers, seperated by
		 '.' - e.g.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
		 Returns a string with the three version numbers, seperated by
		 '.' - e.g. 3.1.2 or 0.1.23
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="com.rosettastone.library.taskmanager:CompositeTask"><apiName>CompositeTask</apiName><shortdesc>
	 Wraps a set of ITasks and executes them in parallel or serial, as specified by a boolean constructor arg.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>com.rosettastone.library.taskmanager:AbstractCompositeTask</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Wraps a set of ITasks and executes them in parallel or serial, as specified by a boolean constructor arg.
	 </apiDesc></apiClassifierDetail><apiConstructor id="com.rosettastone.library.taskmanager:CompositeTask:CompositeTask"><apiName>CompositeTask</apiName><shortdesc>
		 Constructor
		 
		 </shortdesc><prolog><asCustoms><para>taskIdentifier Human friendly identifier for Task
		 
		 </para></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>if tasksOrFunctions Array contains object that is not a Task or a Function
		 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiParam><apiItemName>tasksOrFunctions</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>Set of Tasks and/or functions to be executed
		 </apiDesc></apiParam><apiParam><apiItemName>executeTaskInParallel</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>When TRUE, execute all tasks and report if all succeed (COMPLETE) or not (ERROR)
		                              When FALSE, execute tasks in order.  Do not execute subsequent tasks if one fails.
		 </apiDesc></apiParam><apiParam><apiItemName>taskIdentifier</apiItemName><apiType value="String"/><apiData>null</apiData></apiParam></apiConstructorDef><apiDesc>
		 Constructor
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="com.rosettastone.library.taskmanager:CompositeTask:addTask"><apiName>addTask</apiName><shortdesc>
		 Adds another task to the internal set that this class will execute.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>task</apiItemName><apiOperationClassifier>com.rosettastone.library.taskmanager:ITask</apiOperationClassifier></apiParam></apiOperationDef><apiDesc>
		 Adds another task to the internal set that this class will execute.
		 Additional tasks may be safely at any time (including while the CompositeTask is executing).
		 Tasks are added to the end, so in serial tasks, tasks added later will not be run if an earlier one fails.
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="com.rosettastone.library.taskmanager:RetryOnFailureDecoratorTask"><apiName>RetryOnFailureDecoratorTask</apiName><shortdesc>
	 Special Task decorator for Tasks that should be retried on failure.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>com.rosettastone.library.taskmanager:IDecoratorTask</apiBaseInterface><apiBaseClassifier>com.rosettastone.library.taskmanager:InterruptibleTask</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Special Task decorator for Tasks that should be retried on failure.
	 (For example, this could be useful for Tasks that rely on an internet connection in order to complete.)
	 
	 This task allows its decorated Task to fail a couple of times before bubbling the error.
	 A small amount of time is allowed to pass between each retry.
	 This delay allows time for an external monitor to detect a loss of internet connection and pause all Tasks until it is restored.
	 It also allows for a more graceful handling of occasional HTTP failures.
	 </apiDesc></apiClassifierDetail><apiConstructor id="com.rosettastone.library.taskmanager:RetryOnFailureDecoratorTask:RetryOnFailureDecoratorTask"><apiName>RetryOnFailureDecoratorTask</apiName><shortdesc>
		 Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>decoratedTask</apiItemName><apiOperationClassifier>com.rosettastone.library.taskmanager:Task</apiOperationClassifier><apiDesc>Ideally this Task should be interruptible; if not it will be wrapped in a InterruptibleDecoratorTask to simulate interruptibility
		 </apiDesc></apiParam><apiParam><apiItemName>taskIdentifier</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Optional human-readible Task ID (useful for debug purposes only)
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="com.rosettastone.library.taskmanager:RetryOnFailureDecoratorTask:protected:customInterrupt"><apiName>customInterrupt</apiName><shortdesc>
		 
		 Sub-classes should override this method to implement interruption behavior (removing event listeners, pausing objects, etc.).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Sub-classes should override this method to implement interruption behavior (removing event listeners, pausing objects, etc.).
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:RetryOnFailureDecoratorTask:protected:customReset"><apiName>customReset</apiName><shortdesc>
		 
		 Override this method to perform any custom reset operations.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Override this method to perform any custom reset operations.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:RetryOnFailureDecoratorTask:protected:customRun"><apiName>customRun</apiName><shortdesc>
		 
		 Override this method to give your Task functionality.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Override this method to give your Task functionality.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:RetryOnFailureDecoratorTask:protected:shouldFailedTaskBeRetried"><apiName>shouldFailedTaskBeRetried</apiName><shortdesc>
		 Sub-classes may override this method to determine of a failed Task should be retried.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>failedTask</apiItemName><apiOperationClassifier>com.rosettastone.library.taskmanager:Task</apiOperationClassifier></apiParam></apiOperationDef><apiDesc>
		 Sub-classes may override this method to determine of a failed Task should be retried.
		 This decision is separate from the normal max-retry counting logic.
		 By default this function always returns TRUE.
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.rosettastone.library.taskmanager:RetryOnFailureDecoratorTask:TaskPrivateNamespace:DELAY_BEFORE_RETRYING_IN_MS"><apiName>DELAY_BEFORE_RETRYING_IN_MS</apiName><shortdesc>
		 The amount of time to delay before resetting and re-running the decorated Task.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="TaskPrivateNamespace"/><apiStatic/><apiData>1000</apiData><apiType value="int"/></apiValueDef><apiDesc>
		 The amount of time to delay before resetting and re-running the decorated Task.
		 This value should probably only be overriden for unit test purposes.
		 A value of &lt;= 0 seconds will result in a synchronous retry.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:RetryOnFailureDecoratorTask:TaskPrivateNamespace:MAX_RETRY_ATTEMPTS_BEFORE_ERROR"><apiName>MAX_RETRY_ATTEMPTS_BEFORE_ERROR</apiName><shortdesc>
		 Number of times to reset and re-run the decorated Task.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="TaskPrivateNamespace"/><apiStatic/><apiData>5</apiData><apiType value="int"/></apiValueDef><apiDesc>
		 Number of times to reset and re-run the decorated Task.
		 This value should probably only be overriden for unit test purposes.
		 A value of &lt;= 0 will cause a single failure to trigger a bubbled failure.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:RetryOnFailureDecoratorTask:data:get"><apiName>data</apiName><shortdesc>
		 
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/></apiValueDef><apiDesc>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:RetryOnFailureDecoratorTask:decoratedTask:get"><apiName>decoratedTask</apiName><shortdesc>
		 
		 Inner (decorated) Task.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>com.rosettastone.library.taskmanager:ITask</apiValueClassifier></apiValueDef><apiDesc>
		 
		 Inner (decorated) Task.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:RetryOnFailureDecoratorTask:TaskPrivateNamespace:retryAttemptNumber:get"><apiName>retryAttemptNumber</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="TaskPrivateNamespace"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.rosettastone.library.taskmanager:InterruptibleTask"><apiName>InterruptibleTask</apiName><shortdesc>
	 Abstract inerruptible Task.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>com.rosettastone.library.taskmanager:IInterruptibleTask</apiBaseInterface><apiBaseClassifier>com.rosettastone.library.taskmanager:Task</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Abstract inerruptible Task.
	 Extend this class and override the customInterrupt() method to support interruptibility.
	 </apiDesc></apiClassifierDetail><apiConstructor id="com.rosettastone.library.taskmanager:InterruptibleTask:InterruptibleTask"><apiName>InterruptibleTask</apiName><shortdesc>
		 Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>taskIdentifier</apiItemName><apiType value="String"/><apiData>null</apiData></apiParam></apiConstructorDef><apiDesc>
		 Constructor.
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="com.rosettastone.library.taskmanager:InterruptibleTask:protected:customInterrupt"><apiName>customInterrupt</apiName><shortdesc>
		 Sub-classes should override this method to implement interruption behavior (removing event listeners, pausing objects, etc.).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Sub-classes should override this method to implement interruption behavior (removing event listeners, pausing objects, etc.).
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:InterruptibleTask:interrupt"><apiName>interrupt</apiName><shortdesc>
		 
		 Interrupt the current Task.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>TRUE if the Task has been successfully interrupted
		 </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Interrupt the current Task.
		 Interruptions should be handled in such a way as to allow a subsequent call to run() to resume gracefully.
		 
		 This mehtod should trigger an event of type TaskEvent.INTERRUPTED.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.rosettastone.library.taskmanager:InterruptibleTask:interruptible:get"><apiName>interruptible</apiName><shortdesc>
		 
		 The current Task can be interrupted.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 
		 The current Task can be interrupted.
		 Invoking interrupt() for a Task that is not marked as interruptible may result in an error.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.rosettastone.library.taskmanager:PlaySoundTask"><apiName>PlaySoundTask</apiName><shortdesc>
	 Task that plays a Sound and completes when the sound has finished playing.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>com.rosettastone.library.taskmanager:InterruptibleTask</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Task that plays a Sound and completes when the sound has finished playing.
	 This Task expects that the Sound object provided has already been loaded.
	 
	 This task supports interruption as well as resume.
	 Upon resuming an interrupted Sound this Task can either re-start playback at the beginning or resume from the interrupted point.
	 This behavior can be controlled via the constructor parameter "restartSoundAfterInterruption".
	 </apiDesc></apiClassifierDetail><apiConstructor id="com.rosettastone.library.taskmanager:PlaySoundTask:PlaySoundTask"><apiName>PlaySoundTask</apiName><shortdesc>
		 Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>sound</apiItemName><apiType value="flash.media:Sound"/><apiDesc>Loaded Sound object to be played
		 </apiDesc></apiParam><apiParam><apiItemName>restartSoundAfterInterruption</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Specifies the resume-after-interruption behavior
		 </apiDesc></apiParam><apiParam><apiItemName>taskIdentifier</apiItemName><apiType value="String"/><apiData>null</apiData></apiParam></apiConstructorDef><apiDesc>
		 Constructor.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="com.rosettastone.library.taskmanager:PlaySoundTask:protected:customInterrupt"><apiName>customInterrupt</apiName><shortdesc>
		 
		 Sub-classes should override this method to implement interruption behavior (removing event listeners, pausing objects, etc.).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Sub-classes should override this method to implement interruption behavior (removing event listeners, pausing objects, etc.).
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:PlaySoundTask:protected:customRun"><apiName>customRun</apiName><shortdesc>
		 
		 Override this method to give your Task functionality.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Override this method to give your Task functionality.
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.rosettastone.library.taskmanager:PlaySoundTask:protected:_interruptedPosition"><apiName>_interruptedPosition</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:PlaySoundTask:protected:_restartSoundAfterInterruption"><apiName>_restartSoundAfterInterruption</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:PlaySoundTask:protected:_soundChannel"><apiName>_soundChannel</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="flash.media:SoundChannel"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:PlaySoundTask:protected:_sound"><apiName>_sound</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="flash.media:Sound"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:PlaySoundTask:soundChannel:get"><apiName>soundChannel</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.media:SoundChannel"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:PlaySoundTask:sound:get"><apiName>sound</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.media:Sound"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.rosettastone.library.taskmanager:WaitForUIInitialization"><apiName>WaitForUIInitialization</apiName><shortdesc>
	 Convenience task for waiting until a specified UIComponent has initialized.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>com.rosettastone.library.taskmanager:InterruptibleTask</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Convenience task for waiting until a specified UIComponent has initialized.
	 This can be useful if app initialization (business logic) also depends on UI initialization.
	 </apiDesc></apiClassifierDetail><apiConstructor id="com.rosettastone.library.taskmanager:WaitForUIInitialization:WaitForUIInitialization"><apiName>WaitForUIInitialization</apiName><shortdesc>
		 Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>uiComponent</apiItemName><apiType value="mx.core:UIComponent"/><apiDesc>Component to wait for initialization from
		 </apiDesc></apiParam><apiParam><apiItemName>taskIdentifier</apiItemName><apiType value="String"/><apiData>null</apiData></apiParam></apiConstructorDef><apiDesc>
		 Constructor.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="com.rosettastone.library.taskmanager:WaitForUIInitialization:protected:customInterrupt"><apiName>customInterrupt</apiName><shortdesc>
		 
		 Sub-classes should override this method to implement interruption behavior (removing event listeners, pausing objects, etc.).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Sub-classes should override this method to implement interruption behavior (removing event listeners, pausing objects, etc.).
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:WaitForUIInitialization:protected:customRun"><apiName>customRun</apiName><shortdesc>
		 
		 Override this method to give your Task functionality.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Override this method to give your Task functionality.
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="com.rosettastone.library.taskmanager:StubTask"><apiName>StubTask</apiName><shortdesc>
	 Empty Task useful primarily for unit testing.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>com.rosettastone.library.taskmanager:Task</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Empty Task useful primarily for unit testing.
	 It can also be useful in factory situations when a default no-op behavior is desired.
	 If certain implementations wish to provide behavior they can replace the placeholder Stub task with one that does work.
	 
	 This Task can be configured to auto-complete when it is executed.
	 Otherwise it will not complete or error unless/until specifically told to do so.
	 </apiDesc></apiClassifierDetail><apiConstructor id="com.rosettastone.library.taskmanager:StubTask:StubTask"><apiName>StubTask</apiName><shortdesc>
		 Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>autoCompleteUponRun</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>If TRUE Task will synchronously complete when it is run
		 </apiDesc></apiParam><apiParam><apiItemName>taskIdentifier</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Semantically meaningful task identifier (useful for automated testing or debugging)
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="com.rosettastone.library.taskmanager:StubTask:complete"><apiName>complete</apiName><shortdesc>
		 Instructs Task to complete itself.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>message</apiItemName><apiType value="String"/><apiData/></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="any"/><apiData>null</apiData></apiParam></apiOperationDef><apiDesc>
		 Instructs Task to complete itself.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:StubTask:protected:customRun"><apiName>customRun</apiName><shortdesc>
		 
		 Override this method to give your Task functionality.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Override this method to give your Task functionality.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:StubTask:error"><apiName>error</apiName><shortdesc>
		 Instructs Task to dispatch an error event.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>message</apiItemName><apiType value="String"/><apiData/></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="any"/><apiData>null</apiData></apiParam></apiOperationDef><apiDesc>
		 Instructs Task to dispatch an error event.
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.rosettastone.library.taskmanager:StubTask:synchronous:get"><apiName>synchronous</apiName><shortdesc>
		 
		 
		 The current task can be executed synchronously.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 
		 
		 The current task can be executed synchronously.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.rosettastone.library.taskmanager:AbstractCompositeTask"><apiName>AbstractCompositeTask</apiName><shortdesc>
	 This is an abstract class and should not be instantiated directly.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>com.rosettastone.library.taskmanager:Task</apiBaseClassifier></apiClassifierDef><apiDesc>
	 This is an abstract class and should not be instantiated directly.
	 Instead use one of the following sub-classes: CompositeTask, InterruptibleCompositeTask
	 </apiDesc></apiClassifierDetail><apiOperation id="com.rosettastone.library.taskmanager:AbstractCompositeTask:addFunction"><apiName>addFunction</apiName><shortdesc>
		 Adds a function to the queue of Tasks by wrapping it inside of a TaskWithClosure.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Newly created TaskWithClosure
		 </apiDesc><apiOperationClassifier>com.rosettastone.library.taskmanager:TaskWithClosure</apiOperationClassifier></apiReturn><apiParam><apiItemName>closure</apiItemName><apiType value="Function"/><apiDesc>Function to be executed
		 </apiDesc></apiParam><apiParam><apiItemName>closureIdentifier</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Unique identifier for function (and its TaskWithClosure)
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Adds a function to the queue of Tasks by wrapping it inside of a TaskWithClosure.
		 Functions added this way must be synchronous.
		 This method is simply a convenience method for creating a TaskWithClosure and calling addTask().
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:AbstractCompositeTask:addMultiple"><apiName>addMultiple</apiName><shortdesc>
		 Adds multiple Tasks or Functions to the internal set.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>if any of the specified parameters is not a Task or a Function
		 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>tasksOrFunctions</apiItemName><apiType value="restParam"/><apiDesc>Task or Function objects
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Adds multiple Tasks or Functions to the internal set.
		 This method is a convenience mehtod for calling addTask() or addFunction() multiple times.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:AbstractCompositeTask:protected:addTaskEventListeners"><apiName>addTaskEventListeners</apiName><shortdesc>
		 Convenience method for adding TaskEvent listeners to a Task.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>task</apiItemName><apiOperationClassifier>com.rosettastone.library.taskmanager:ITask</apiOperationClassifier></apiParam></apiOperationDef><apiDesc>
		 Convenience method for adding TaskEvent listeners to a Task.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:AbstractCompositeTask:protected:addTaskHelper"><apiName>addTaskHelper</apiName><shortdesc>
		 Adds another task to the internal set that this class will execute.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>task</apiItemName><apiOperationClassifier>com.rosettastone.library.taskmanager:ITask</apiOperationClassifier></apiParam></apiOperationDef><apiDesc>
		 Adds another task to the internal set that this class will execute.
		 Additional tasks may be safely at any time (including while the CompositeTask is executing).
		 Tasks are added to the end, so in serial tasks, tasks added later will not be run if an earlier one fails.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:AbstractCompositeTask:protected:addTasksBeforeRun"><apiName>addTasksBeforeRun</apiName><shortdesc>
		 Sub-classes may override this method to J.I.T.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Sub-classes may override this method to J.I.T. add child Tasks before the composite Task is run.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:AbstractCompositeTask:protected:checkForTaskCompletion"><apiName>checkForTaskCompletion</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:AbstractCompositeTask:protected:customReset"><apiName>customReset</apiName><shortdesc>
		 
		 Override this method to perform any custom reset operations.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Override this method to perform any custom reset operations.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:AbstractCompositeTask:protected:customRun"><apiName>customRun</apiName><shortdesc>
		 
		 Override this method to give your Task functionality.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Override this method to give your Task functionality.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:AbstractCompositeTask:protected:flushTaskQueue"><apiName>flushTaskQueue</apiName><shortdesc>
		 Remove all Tasks from the queue.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>forcefullyPreventTaskFromCompleting</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Prevent CompositeTask from completing after queue has been cleared
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Remove all Tasks from the queue.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:AbstractCompositeTask:protected:handleTaskCompletedOrRemoved"><apiName>handleTaskCompletedOrRemoved</apiName><shortdesc>
		 Convenience method for handling a completed Task and executing the next.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>task</apiItemName><apiOperationClassifier>com.rosettastone.library.taskmanager:ITask</apiOperationClassifier></apiParam></apiOperationDef><apiDesc>
		 Convenience method for handling a completed Task and executing the next.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:AbstractCompositeTask:protected:individualTaskComplete"><apiName>individualTaskComplete</apiName><shortdesc>
		 Override this method to be notified when individual Tasks have successfully completed.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>task</apiItemName><apiOperationClassifier>com.rosettastone.library.taskmanager:ITask</apiOperationClassifier></apiParam></apiOperationDef><apiDesc>
		 Override this method to be notified when individual Tasks have successfully completed.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:AbstractCompositeTask:protected:individualTaskStarted"><apiName>individualTaskStarted</apiName><shortdesc>
		 Override this method to be notified when individual Tasks are started.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>task</apiItemName><apiOperationClassifier>com.rosettastone.library.taskmanager:ITask</apiOperationClassifier></apiParam></apiOperationDef><apiDesc>
		 Override this method to be notified when individual Tasks are started.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:AbstractCompositeTask:interrupt"><apiName>interrupt</apiName><shortdesc>
		 
		 Interruptible tasks should override interrupt() and get interruptible() if they are interruptible.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Interruptible tasks should override interrupt() and get interruptible() if they are interruptible.
		 
		 If they are, they should fire a TaskEvent.INTERRUPTED to indicate successful interruption of the task.
		 
		 If the interrupting fails at runtime, this method returns false
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:AbstractCompositeTask:removeFunction"><apiName>removeFunction</apiName><shortdesc>
		 Removes a function from the queue of Tasks by locating its corresponding TaskWithClosure.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>TaskWithClosure (if one found)
		 </apiDesc><apiOperationClassifier>com.rosettastone.library.taskmanager:TaskWithClosure</apiOperationClassifier></apiReturn><apiParam><apiItemName>closure</apiItemName><apiType value="Function"/><apiDesc>Function to be executed
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a function from the queue of Tasks by locating its corresponding TaskWithClosure.
		 This method is simply a convenience method for locating the matching Task and calling removeTask().
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:AbstractCompositeTask:removeMultiple"><apiName>removeMultiple</apiName><shortdesc>
		 Removes multiple Tasks or Functions from the internal set.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>if any of the specified parameters is not a Task or a Function
		 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>tasksOrFunctions</apiItemName><apiType value="restParam"/><apiDesc>Task or Function objects
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes multiple Tasks or Functions from the internal set.
		 This method is a convenience mehtod for calling removeTask() or removeFunction() multiple times.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:AbstractCompositeTask:protected:removeTaskEventListeners"><apiName>removeTaskEventListeners</apiName><shortdesc>
		 Convenience method for removing TaskEvent listeners from a Task.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>task</apiItemName><apiOperationClassifier>com.rosettastone.library.taskmanager:ITask</apiOperationClassifier></apiParam></apiOperationDef><apiDesc>
		 Convenience method for removing TaskEvent listeners from a Task.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:AbstractCompositeTask:removeTask"><apiName>removeTask</apiName><shortdesc>
		 Removes a task from the internal set that this class will execute.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>task</apiItemName><apiOperationClassifier>com.rosettastone.library.taskmanager:ITask</apiOperationClassifier></apiParam></apiOperationDef><apiDesc>
		 Removes a task from the internal set that this class will execute.
		 If the specified Task has not been executed before it is removed it will not be executed by the CompositeTask.
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.rosettastone.library.taskmanager:AbstractCompositeTask:protected:_addTasksBeforeRunInvoked"><apiName>_addTasksBeforeRunInvoked</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:AbstractCompositeTask:protected:_erroredTasks"><apiName>_erroredTasks</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Array"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:AbstractCompositeTask:protected:_executeTaskInParallel"><apiName>_executeTaskInParallel</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:AbstractCompositeTask:protected:_flushTaskQueueLock"><apiName>_flushTaskQueueLock</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:AbstractCompositeTask:protected:_interruptedTask"><apiName>_interruptedTask</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>com.rosettastone.library.taskmanager:ITask</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:AbstractCompositeTask:protected:_taskQueueIndex"><apiName>_taskQueueIndex</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:AbstractCompositeTask:protected:_taskQueue"><apiName>_taskQueue</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Array"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:AbstractCompositeTask:protected:allTasksAreCompleted:get"><apiName>allTasksAreCompleted</apiName><shortdesc>
		 No incomplete Tasks remain in the queue.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 No incomplete Tasks remain in the queue.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:AbstractCompositeTask:protected:currentSerialTask:get"><apiName>currentSerialTask</apiName><shortdesc>
		 References the Task that is currently running (if this CompositeTask has been told to execute in serial).</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>com.rosettastone.library.taskmanager:ITask</apiValueClassifier></apiValueDef><apiDesc>
		 References the Task that is currently running (if this CompositeTask has been told to execute in serial).
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:AbstractCompositeTask:errorDatas:get"><apiName>errorDatas</apiName><shortdesc>
		 Error datas from all inner Tasks that failed during execution.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
		 Error datas from all inner Tasks that failed during execution.
		 This value is valid after during execution of the CompositeTask as well as upon completion (or failure).
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:AbstractCompositeTask:errorMessages:get"><apiName>errorMessages</apiName><shortdesc>
		 Unique error messages from all inner Tasks that failed during execution.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
		 Unique error messages from all inner Tasks that failed during execution.
		 This value is valid after during execution of the CompositeTask as well as upon completion (or failure).
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:AbstractCompositeTask:erroredTasks:get"><apiName>erroredTasks</apiName><shortdesc>
		 Tasks that errored during execution.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
		 Tasks that errored during execution.
		 This value is valid after during execution of the CompositeTask as well as upon completion (or failure).
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:AbstractCompositeTask:interruptible:get"><apiName>interruptible</apiName><shortdesc>
		 
		 The current Task can be interrupted.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 
		 The current Task can be interrupted.
		 Invoking interrupt() for a Task that is not marked as interruptible may result in an error.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:AbstractCompositeTask:numCompletedTasks:get"><apiName>numCompletedTasks</apiName><shortdesc>
		 Number of inner Tasks that have successfully completed.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 Number of inner Tasks that have successfully completed.
		 This value is only valid while the CompositeTask is running.
		 Upon completion (or failure) of the CompositeTask this value will be reset to 0.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:AbstractCompositeTask:numInternalOperationsCompleted:get"><apiName>numInternalOperationsCompleted</apiName><shortdesc>
		 
		 
		 Number of internal operations that have completed.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 
		 
		 Number of internal operations that have completed.
		 Sub-classes should override this method if containing a value &gt; 1;
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:AbstractCompositeTask:numInternalOperations:get"><apiName>numInternalOperations</apiName><shortdesc>
		 
		 
		 Number of internal operations conducted by this task.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 
		 
		 Number of internal operations conducted by this task.
		 Sub-classes should override this method if containing a value &gt; 1;
		 
		 If value &gt; 1, task should dispatch ProgressEvent.PROGRESS events manually to indicate changes in numInternalOperationsCompleted.
		 If value == 1, task will automatically dispatching ProgressEvent.PROGRESS events.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:AbstractCompositeTask:numPendingTasks:get"><apiName>numPendingTasks</apiName><shortdesc>
		 Number of inner Tasks that have been started and have not yet completed.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 Number of inner Tasks that have been started and have not yet completed.
		 This value is only valid while the CompositeTask is running (or before it has been started).
		 Upon completion (or failure) of the CompositeTask this value will be reset to 0.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:AbstractCompositeTask:numTasks:get"><apiName>numTasks</apiName><shortdesc>
		 Number of inner Tasks.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 Number of inner Tasks.
		 This value is only valid while the CompositeTask is running (or before it has been started).
		 Upon completion (or failure) of the CompositeTask this value will be reset to 0.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:AbstractCompositeTask:pendingTasks:get"><apiName>pendingTasks</apiName><shortdesc>
		 Tasks currently in the process of being executed.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
		 Tasks currently in the process of being executed.
		 This value is only valid while the CompositeTask is running (or before it has been started).
		 Upon completion (or failure) of the CompositeTask this value will be reset to 0.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:AbstractCompositeTask:synchronous:get"><apiName>synchronous</apiName><shortdesc>
		 
		 
		 The current task can be executed synchronously.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 
		 
		 The current task can be executed synchronously.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:AbstractCompositeTask:TaskPrivateNamespace:taskQueueIndex:get"><apiName>taskQueueIndex</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="TaskPrivateNamespace"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:AbstractCompositeTask:TaskPrivateNamespace:taskQueue:get"><apiName>taskQueue</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="TaskPrivateNamespace"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.rosettastone.library.taskmanager:ITask"><apiName>ITask</apiName><shortdesc>
	 A Task represents a job.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 A Task represents a job.
	 This job can be synchronous or asynchronous.
	 It can be a simple operation or a composite of other Tasks.
	 This interface defines the minimum API that must be implemented by a Task within the Task Manager framework.
	 </apiDesc></apiClassifierDetail><adobeApiEvent id="com.rosettastone.library.taskmanager:ITask_flash.events.ProgressEvent_progress"><apiName>progress</apiName><shortdesc/><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events.ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc></apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="com.rosettastone.library.taskmanager:ITask_com.rosettastone.library.taskmanager.events.TaskEvent_taskEventStarted"><apiName>taskEventStarted</apiName><shortdesc/><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>com.rosettastone.library.taskmanager.events.TaskEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc></apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="com.rosettastone.library.taskmanager:ITask_com.rosettastone.library.taskmanager.events.TaskEvent_taskEventFinal"><apiName>taskEventFinal</apiName><shortdesc/><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>com.rosettastone.library.taskmanager.events.TaskEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc></apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="com.rosettastone.library.taskmanager:ITask_com.rosettastone.library.taskmanager.events.TaskEvent_taskEventError"><apiName>taskEventError</apiName><shortdesc/><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>com.rosettastone.library.taskmanager.events.TaskEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc></apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="com.rosettastone.library.taskmanager:ITask_com.rosettastone.library.taskmanager.events.TaskEvent_taskEventComplete"><apiName>taskEventComplete</apiName><shortdesc/><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>com.rosettastone.library.taskmanager.events.TaskEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc></apiDesc></adobeApiEventDetail></adobeApiEvent><apiOperation id="com.rosettastone.library.taskmanager:ITask:com.rosettastone.library.taskmanager:ITask:and"><apiName>and</apiName><shortdesc>
		 Executes the specified tasks when the current task is executed.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>if any parameter is not a task
		 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>com.rosettastone.library.taskmanager:ITask</apiOperationClassifier></apiReturn><apiParam><apiItemName>chainedTasks</apiItemName><apiType value="restParam"/><apiDesc>One or more tasks
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Executes the specified tasks when the current task is executed.
		 If the current task has already been started the new tasks will be executed immediately.
		 Failures or interruptions in the current task will not affect the chained tasks.
		 
		 </apiDesc><example conref="TaskAndExample.as"><codeblock>var initialTask:StubTask = new StubTask();
var parallelTask:StubTask = new StubTask();

initialTask.and( parallelTask ).run();
</codeblock><swfblock conref="TaskAndExample.swf"/></example></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:ITask:com.rosettastone.library.taskmanager:ITask:or"><apiName>or</apiName><shortdesc>
		 Executes the specified tasks if the current task fails.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>if any parameter is not a task
		 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>com.rosettastone.library.taskmanager:ITask</apiOperationClassifier></apiReturn><apiParam><apiItemName>chainedTasks</apiItemName><apiType value="restParam"/><apiDesc>One or more tasks
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Executes the specified tasks if the current task fails.
		 
		 </apiDesc><example conref="TaskOrExample.as"><codeblock>var initialTask:StubTask = new StubTask();
var fallbackTask:StubTask = new StubTask();

initialTask.or( fallbackTask ).run();
</codeblock><swfblock conref="TaskOrExample.swf"/></example></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:ITask:com.rosettastone.library.taskmanager:ITask:reset"><apiName>reset</apiName><shortdesc>
		 Resets the task to it's pre-run state.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Resets the task to it's pre-run state.
		 This allows it to be re-run.
		 This method can only be called on non-running tasks.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:ITask:com.rosettastone.library.taskmanager:ITask:run"><apiName>run</apiName><shortdesc>
		 Starts a task.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>com.rosettastone.library.taskmanager:ITask</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Starts a task.
		 This method will dispatch a TaskEvent.STARTED to indicate that the task has begun.
		 
		 This method may also be used to retry/resume an errored task.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:ITask:com.rosettastone.library.taskmanager:ITask:then"><apiName>then</apiName><shortdesc>
		 Executes the specified tasks once the current task has completed successfully.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>if any parameter is not a task
		 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>com.rosettastone.library.taskmanager:ITask</apiOperationClassifier></apiReturn><apiParam><apiItemName>chainedTasks</apiItemName><apiType value="restParam"/><apiDesc>One or more tasks
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Executes the specified tasks once the current task has completed successfully.
		 
		 </apiDesc><example conref="TaskThenExample.as"><codeblock>var firstTask:StubTask = new StubTask();
var secondTask:StubTask = new StubTask();

firstTask.then( secondTask ).run();
</codeblock><swfblock conref="TaskThenExample.swf"/></example></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:ITask:com.rosettastone.library.taskmanager:ITask:withCompleteHandler"><apiName>withCompleteHandler</apiName><shortdesc>
		 Although tasks dispatch TaskEvents to indicate completion, this method may also be used for notification purposes.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>com.rosettastone.library.taskmanager:ITask</apiOperationClassifier></apiReturn><apiParam><apiItemName>completeHandler</apiItemName><apiType value="Function"/><apiDesc>Function
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Although tasks dispatch TaskEvents to indicate completion, this method may also be used for notification purposes.
		 The provided function will be invoked only upon successful completion of the task.
		 
		 This method may be called multiple times safely; each unique function specified will be executed once when the task completes.
		 
		 <p>
		 It should have one of the following signatures:
		 <pre>function( message:String = "", data:= null ):void</pre>
		 <pre>function():void</pre>
		 </p>
		 		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:ITask:com.rosettastone.library.taskmanager:ITask:withErrorHandler"><apiName>withErrorHandler</apiName><shortdesc>
		 Although tasks dispatch TaskEvents to indicate failure, this method may also be used for notification purposes.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>com.rosettastone.library.taskmanager:ITask</apiOperationClassifier></apiReturn><apiParam><apiItemName>errorHandler</apiItemName><apiType value="Function"/><apiDesc>Function
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Although tasks dispatch TaskEvents to indicate failure, this method may also be used for notification purposes.
		 The provided function will be invoked only upon failure of the task.
		 
		 This method may be called multiple times safely; each unique function specified will be executed once if the tasks errors.
		 
		 <p>
		 It should have one of the following signatures:
		 <pre>function( message:String = "", data:= null ):void</pre>
		 <pre>function():void</pre>
		 </p>
		 		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:ITask:com.rosettastone.library.taskmanager:ITask:withFinalHandler"><apiName>withFinalHandler</apiName><shortdesc>
		 This handler is invoked upon either success or failure of the Task.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>com.rosettastone.library.taskmanager:ITask</apiOperationClassifier></apiReturn><apiParam><apiItemName>finalHandler</apiItemName><apiType value="Function"/></apiParam></apiOperationDef><apiDesc>
		 This handler is invoked upon either success or failure of the Task.
		 It can be used for cleanup that must be done regardless of Task-status.
		 
		 <p>
		 This method may be called multiple times safely.
		 Each unique function specified will be executed once when the task is ready for cleanup.
		 </p>
		 
		 <p>
		 This type of closure should implement the following signature:
		 <pre>function():void</pre>
		 </p>
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:ITask:com.rosettastone.library.taskmanager:ITask:withStartedHandler"><apiName>withStartedHandler</apiName><shortdesc>
		 Although tasks dispatch TaskEvents to indicate starting, this method may also be used for notification purposes.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>com.rosettastone.library.taskmanager:ITask</apiOperationClassifier></apiReturn><apiParam><apiItemName>startedHandler</apiItemName><apiType value="Function"/><apiDesc>Function
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Although tasks dispatch TaskEvents to indicate starting, this method may also be used for notification purposes.
		 The provided function will be invoked each time the task is started (or re-started).
		 
		 This method may be called multiple times safely; each unique function specified will be executed once when the task starts.
		 
		 <p>
		 It should have the following signature:
		 <pre>function():void</pre>
		 </p>
		 		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.rosettastone.library.taskmanager:ITask:com.rosettastone.library.taskmanager:ITask:data:get"><apiName>data</apiName><shortdesc>
		 Optional data parameter passed to the Task complete/error/interruption method.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/></apiValueDef><apiDesc>
		 Optional data parameter passed to the Task complete/error/interruption method.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:ITask:com.rosettastone.library.taskmanager:ITask:isComplete:get"><apiName>isComplete</apiName><shortdesc>
		 The current task has successfully completed execution.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 The current task has successfully completed execution.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:ITask:com.rosettastone.library.taskmanager:ITask:isErrored:get"><apiName>isErrored</apiName><shortdesc>
		 The current task failed.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 The current task failed.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:ITask:com.rosettastone.library.taskmanager:ITask:isRunning:get"><apiName>isRunning</apiName><shortdesc>
		 The task is currently running.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 The task is currently running.
		 This value is FALSE if the task has not been run, has completed run (succesfully or due to a failure), or has been interrupted.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:ITask:com.rosettastone.library.taskmanager:ITask:message:get"><apiName>message</apiName><shortdesc>
		 Optional message parameter passed to the task complete/error/interruption method.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
		 Optional message parameter passed to the task complete/error/interruption method.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:ITask:com.rosettastone.library.taskmanager:ITask:numInternalOperationsCompleted:get"><apiName>numInternalOperationsCompleted</apiName><shortdesc>
		 Number of internal operations that have completed.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 Number of internal operations that have completed.
		 Sub-classes should override this method if containing a value &gt; 1;
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:ITask:com.rosettastone.library.taskmanager:ITask:numInternalOperationsPending:get"><apiName>numInternalOperationsPending</apiName><shortdesc>
		 Number of internal operations not yet completed.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 Number of internal operations not yet completed.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:ITask:com.rosettastone.library.taskmanager:ITask:numInternalOperations:get"><apiName>numInternalOperations</apiName><shortdesc>
		 Number of internal operations conducted by this task.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 Number of internal operations conducted by this task.
		 Sub-classes should override this method if containing a value &gt; 1;
		 
		 If value &gt; 1, task should dispatch ProgressEvent.PROGRESS events manually to indicate changes in numInternalOperationsCompleted.
		 If value == 1, task will automatically dispatching ProgressEvent.PROGRESS events.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:ITask:com.rosettastone.library.taskmanager:ITask:numTimesCompleted:get"><apiName>numTimesCompleted</apiName><shortdesc>
		 Number of times this task has completed.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 Number of times this task has completed.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:ITask:com.rosettastone.library.taskmanager:ITask:numTimesErrored:get"><apiName>numTimesErrored</apiName><shortdesc>
		 Number of times this task has errored.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 Number of times this task has errored.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:ITask:com.rosettastone.library.taskmanager:ITask:numTimesInterrupted:get"><apiName>numTimesInterrupted</apiName><shortdesc>
		 Number of times this task has been interrupted.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 Number of times this task has been interrupted.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:ITask:com.rosettastone.library.taskmanager:ITask:numTimesReset:get"><apiName>numTimesReset</apiName><shortdesc>
		 Number of times this task has been reset.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 Number of times this task has been reset.
		 This is the only counter that is not reset by the reset() method.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:ITask:com.rosettastone.library.taskmanager:ITask:numTimesStarted:get"><apiName>numTimesStarted</apiName><shortdesc>
		 Number of times this task has been started.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 Number of times this task has been started.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:ITask:com.rosettastone.library.taskmanager:ITask:running:get"><apiName>running</apiName><shortdesc>
		 The task is currently running.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 The task is currently running.
		 This value is FALSE if the task has not been run, has completed run (succesfully or due to a failure), or has been interrupted.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:ITask:com.rosettastone.library.taskmanager:ITask:synchronous:get"><apiName>synchronous</apiName><shortdesc>
		 The current task can be executed synchronously.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 The current task can be executed synchronously.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:ITask:com.rosettastone.library.taskmanager:ITask:taskIdentifier:get"><apiName>taskIdentifier</apiName><shortdesc>
		 (Optional) human-readable label for task.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
		 (Optional) human-readable label for task.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:ITask:com.rosettastone.library.taskmanager:ITask:uniqueID:get"><apiName>uniqueID</apiName><shortdesc>
		 Unique ID for a task.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 Unique ID for a task.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.rosettastone.library.taskmanager:SleepTask"><apiName>SleepTask</apiName><shortdesc>
	 Sleeps until told to complete.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>com.rosettastone.library.taskmanager:InterruptibleTask</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Sleeps until told to complete.
	 This Task can be inserted into a composite to block for an indeterminate amount of time.
	 Since this Task is simple a placeholder, it supports interruptibility.
	 </apiDesc></apiClassifierDetail><apiConstructor id="com.rosettastone.library.taskmanager:SleepTask:SleepTask"><apiName>SleepTask</apiName><shortdesc>
		 Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>taskIdentifier</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Human-friendly Task identifier
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="com.rosettastone.library.taskmanager:SleepTask:complete"><apiName>complete</apiName><shortdesc>
		 Stop sleeping and complete Task.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Stop sleeping and complete Task.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:SleepTask:protected:customInterrupt"><apiName>customInterrupt</apiName><shortdesc>
		 
		 Sub-classes should override this method to implement interruption behavior (removing event listeners, pausing objects, etc.).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Sub-classes should override this method to implement interruption behavior (removing event listeners, pausing objects, etc.).
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:SleepTask:protected:customRun"><apiName>customRun</apiName><shortdesc>
		 
		 Override this method to give your Task functionality.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Override this method to give your Task functionality.
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="com.rosettastone.library.taskmanager:FactoryTask"><apiName>FactoryTask</apiName><shortdesc>
	 Decorates a Task returned by the specified factory method.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>com.rosettastone.library.taskmanager:IDecoratorTask</apiBaseInterface><apiBaseClassifier>com.rosettastone.library.taskmanager:InterruptibleTask</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Decorates a Task returned by the specified factory method.
	 This Task does not invoke the provided factory method until it is actually executed.
	 This allows for just-in-time evaluation of data set by previous Tasks.
	 </apiDesc></apiClassifierDetail><apiConstructor id="com.rosettastone.library.taskmanager:FactoryTask:FactoryTask"><apiName>FactoryTask</apiName><shortdesc>
		 Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>taskFactoryFunction</apiItemName><apiType value="Function"/><apiDesc>Returns an ITask object
		 </apiDesc></apiParam><apiParam><apiItemName>thisObj</apiItemName><apiType value="any"/><apiData>null</apiData><apiDesc>Optional object to which the function is applied.
		 </apiDesc></apiParam><apiParam><apiItemName>args</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>Optional Array of parameters to be passed to the factory Function.
		             If this value is specified a target "thisObj" must be provided as well.
		 </apiDesc></apiParam><apiParam><apiItemName>taskWillBeInterruptible</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Task returned by facotry function is interruptible
		 </apiDesc></apiParam><apiParam><apiItemName>taskIdentifier</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Semantically meaningful task identifier (useful for automated testing or debugging)
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="com.rosettastone.library.taskmanager:FactoryTask:protected:customInterrupt"><apiName>customInterrupt</apiName><shortdesc>
		 
		 Sub-classes should override this method to implement interruption behavior (removing event listeners, pausing objects, etc.).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Sub-classes should override this method to implement interruption behavior (removing event listeners, pausing objects, etc.).
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:FactoryTask:protected:customReset"><apiName>customReset</apiName><shortdesc>
		 
		 Override this method to perform any custom reset operations.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Override this method to perform any custom reset operations.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:FactoryTask:protected:customRun"><apiName>customRun</apiName><shortdesc>
		 
		 Override this method to give your Task functionality.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Override this method to give your Task functionality.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:FactoryTask:setReexecuteFactoryFunctionAfterError"><apiName>setReexecuteFactoryFunctionAfterError</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>com.rosettastone.library.taskmanager:FactoryTask</apiOperationClassifier></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiValue id="com.rosettastone.library.taskmanager:FactoryTask:protected:_args"><apiName>_args</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Array"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:FactoryTask:protected:_recreateDecoratedTaskWhenNextRun"><apiName>_recreateDecoratedTaskWhenNextRun</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:FactoryTask:protected:_reexecuteFactoryFunctionAfterError"><apiName>_reexecuteFactoryFunctionAfterError</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:FactoryTask:protected:_taskFactoryFunction"><apiName>_taskFactoryFunction</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Function"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:FactoryTask:protected:_taskWillBeInterruptible"><apiName>_taskWillBeInterruptible</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:FactoryTask:protected:_task"><apiName>_task</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>com.rosettastone.library.taskmanager:IInterruptibleTask</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:FactoryTask:protected:_thisObj"><apiName>_thisObj</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value=""/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:FactoryTask:decoratedTask:get"><apiName>decoratedTask</apiName><shortdesc>
		 
		 Inner (decorated) Task.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>com.rosettastone.library.taskmanager:ITask</apiValueClassifier></apiValueDef><apiDesc>
		 
		 Inner (decorated) Task.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:FactoryTask:reexecuteFactoryFunctionAfterError:get"><apiName>reexecuteFactoryFunctionAfterError</apiName><shortdesc>
		 If this FactoryTask is re-run after an error has occurred, this attribute controls whether it:
		 (a) Reuses the decorated Task initially created during its first run, or
		 (b) Reexecutes the factory method to create a new decorated Task.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 If this FactoryTask is re-run after an error has occurred, this attribute controls whether it:
		 (a) Reuses the decorated Task initially created during its first run, or
		 (b) Reexecutes the factory method to create a new decorated Task.
		 
		 By default this value is FALSE, meaning that the decorated task created initially will be reused.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.rosettastone.library.taskmanager:InnocuousTaskDecorator"><apiName>InnocuousTaskDecorator</apiName><shortdesc>
	 Decorates a Task but re-dispatches both error and success events as success.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>com.rosettastone.library.taskmanager:IDecoratorTask</apiBaseInterface><apiBaseClassifier>com.rosettastone.library.taskmanager:InterruptibleTask</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Decorates a Task but re-dispatches both error and success events as success.
	 This type of decorator should be used for Tasks that are required and are blocking, but should not be considered fatal in the event of a failure.
	 </apiDesc></apiClassifierDetail><apiConstructor id="com.rosettastone.library.taskmanager:InnocuousTaskDecorator:InnocuousTaskDecorator"><apiName>InnocuousTaskDecorator</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>decorated</apiItemName><apiOperationClassifier>com.rosettastone.library.taskmanager:ITask</apiOperationClassifier></apiParam><apiParam><apiItemName>taskIdentifier</apiItemName><apiType value="String"/><apiData>null</apiData></apiParam></apiConstructorDef></apiConstructorDetail></apiConstructor><apiOperation id="com.rosettastone.library.taskmanager:InnocuousTaskDecorator:protected:customRun"><apiName>customRun</apiName><shortdesc>
		 
		 Override this method to give your Task functionality.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Override this method to give your Task functionality.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:InnocuousTaskDecorator:interrupt"><apiName>interrupt</apiName><shortdesc>
		 
		 
		 Interrupt the current Task.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>TRUE if the Task has been successfully interrupted
		 </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
		 
		 
		 Interrupt the current Task.
		 Interruptions should be handled in such a way as to allow a subsequent call to run() to resume gracefully.
		 
		 This mehtod should trigger an event of type TaskEvent.INTERRUPTED.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:InnocuousTaskDecorator:reset"><apiName>reset</apiName><shortdesc>
		 
		 Resets the task to it's pre-run state.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Resets the task to it's pre-run state.
		 This allows it to be re-run.
		 This method can only be called on non-running tasks.
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.rosettastone.library.taskmanager:InnocuousTaskDecorator:decoratedTask:get"><apiName>decoratedTask</apiName><shortdesc>
		 
		 Inner (decorated) Task.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>com.rosettastone.library.taskmanager:ITask</apiValueClassifier></apiValueDef><apiDesc>
		 
		 Inner (decorated) Task.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:InnocuousTaskDecorator:isComplete:get"><apiName>isComplete</apiName><shortdesc>
		 
		 The current task has successfully completed execution.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 
		 The current task has successfully completed execution.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:InnocuousTaskDecorator:running:get"><apiName>running</apiName><shortdesc>
		 
		 The task is currently running.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 
		 The task is currently running.
		 This value is FALSE if the task has not been run, has completed run (succesfully or due to a failure), or has been interrupted.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.rosettastone.library.taskmanager:Task"><apiName>Task</apiName><shortdesc>
	 This class is meant to encapsulate a single, self-contained job.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>com.rosettastone.library.taskmanager:ITask</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
	 This class is meant to encapsulate a single, self-contained job.
	 Each instance can have 0+ dependencies in the form of other tasks.
	 
	 To create a usable Task, extend this class and override the customRun() method.
	 Your Task should call taskComplete() or taskError() when it has completed or failed.
	 </apiDesc></apiClassifierDetail><adobeApiEvent id="com.rosettastone.library.taskmanager:Task_flash.events.ProgressEvent_progress"><apiName>progress</apiName><shortdesc/><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events.ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc></apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="com.rosettastone.library.taskmanager:Task_com.rosettastone.library.taskmanager.events.TaskEvent_taskEventInterrupted"><apiName>taskEventInterrupted</apiName><shortdesc/><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>com.rosettastone.library.taskmanager.events.TaskEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc></apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="com.rosettastone.library.taskmanager:Task_com.rosettastone.library.taskmanager.events.TaskEvent_taskEventStarted"><apiName>taskEventStarted</apiName><shortdesc/><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>com.rosettastone.library.taskmanager.events.TaskEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc></apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="com.rosettastone.library.taskmanager:Task_com.rosettastone.library.taskmanager.events.TaskEvent_taskEventFinal"><apiName>taskEventFinal</apiName><shortdesc/><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>com.rosettastone.library.taskmanager.events.TaskEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc></apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="com.rosettastone.library.taskmanager:Task_com.rosettastone.library.taskmanager.events.TaskEvent_taskEventError"><apiName>taskEventError</apiName><shortdesc/><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>com.rosettastone.library.taskmanager.events.TaskEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc></apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="com.rosettastone.library.taskmanager:Task_com.rosettastone.library.taskmanager.events.TaskEvent_taskEventComplete"><apiName>taskEventComplete</apiName><shortdesc/><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>com.rosettastone.library.taskmanager.events.TaskEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc></apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="com.rosettastone.library.taskmanager:Task:Task"><apiName>Task</apiName><shortdesc>
		 Constructor
		 
		 </shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>taskIdentifier</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Human-friendly ID string useful for debugging purposes only.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="com.rosettastone.library.taskmanager:Task:and"><apiName>and</apiName><shortdesc>
		 
		 Executes the specified tasks when the current task is executed.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>com.rosettastone.library.taskmanager:ITask</apiOperationClassifier></apiReturn><apiParam><apiItemName>chainedTasks</apiItemName><apiType value="restParam"/><apiDesc>One or more tasks
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Executes the specified tasks when the current task is executed.
		 If the current task has already been started the new tasks will be executed immediately.
		 Failures or interruptions in the current task will not affect the chained tasks.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:Task:protected:customReset"><apiName>customReset</apiName><shortdesc>
		 Override this method to perform any custom reset operations.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Override this method to perform any custom reset operations.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:Task:protected:customRun"><apiName>customRun</apiName><shortdesc>
		 Override this method to give your Task functionality.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Override this method to give your Task functionality.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:Task:disconnectFromInterruptingTask"><apiName>disconnectFromInterruptingTask</apiName><shortdesc>
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:Task:protected:dispatchProgressEvent"><apiName>dispatchProgressEvent</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:Task:TaskPrivateNamespace:doTaskComplete"><apiName>doTaskComplete</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="TaskPrivateNamespace"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>message</apiItemName><apiType value="String"/><apiData/></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="any"/><apiData>null</apiData></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:Task:TaskPrivateNamespace:doTaskError"><apiName>doTaskError</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="TaskPrivateNamespace"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>message</apiItemName><apiType value="String"/><apiData/></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="any"/><apiData>null</apiData></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:Task:TaskPrivateNamespace:doTaskInterrupted"><apiName>doTaskInterrupted</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="TaskPrivateNamespace"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>message</apiItemName><apiType value="String"/><apiData/></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="any"/><apiData>null</apiData></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:Task:protected:getLoggerString"><apiName>getLoggerString</apiName><shortdesc>
		 Returns a string for logging the specified task-state event.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="String"/></apiReturn><apiParam><apiItemName>string</apiItemName><apiType value="String"/><apiDesc>String to append to log
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a string for logging the specified task-state event.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:Task:interruptForTask"><apiName>interruptForTask</apiName><shortdesc>
		 Interrupts the current Task to wait on the Task specified.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>interruptingTask</apiItemName><apiOperationClassifier>com.rosettastone.library.taskmanager:ITask</apiOperationClassifier><apiDesc>Task
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Interrupts the current Task to wait on the Task specified.
		 Once this Task dispatches a TaskEvent.COMPLETE event, this Task will resume.
		 If the specified Task dispatches a TaskEvent.ERROR event this Task will also error.
		 TaskEvent.INTERRUPTED events are ignored.
		 
		 If this method is called once with a Task and then called again before that Task has completed,
		 Event listeners will be removed from the first Task and added to the second one.
		 There can only be 1 active interrupting Task at a time.
		 If this Task should be interrupted by more than one Task, a CompositeTask or ObserverTask should be used.
		 
		 If the specified interrupting Task is already running this method will simply add event listeners.
		 If it is not running this method will add event listeners but will rely on external code to run the interrupter.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:Task:interrupt"><apiName>interrupt</apiName><shortdesc>
		 Interruptible tasks should override interrupt() and get interruptible() if they are interruptible.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
		 Interruptible tasks should override interrupt() and get interruptible() if they are interruptible.
		 
		 If they are, they should fire a TaskEvent.INTERRUPTED to indicate successful interruption of the task.
		 
		 If the interrupting fails at runtime, this method returns false
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:Task:TaskPrivateNamespace:onInterruptingTaskComplete"><apiName>onInterruptingTaskComplete</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="TaskPrivateNamespace"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>com.rosettastone.library.taskmanager.events:TaskEvent</apiOperationClassifier></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:Task:TaskPrivateNamespace:onInterruptingTaskError"><apiName>onInterruptingTaskError</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="TaskPrivateNamespace"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>com.rosettastone.library.taskmanager.events:TaskEvent</apiOperationClassifier></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:Task:or"><apiName>or</apiName><shortdesc>
		 
		 Executes the specified tasks if the current task fails.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>com.rosettastone.library.taskmanager:ITask</apiOperationClassifier></apiReturn><apiParam><apiItemName>chainedTasks</apiItemName><apiType value="restParam"/><apiDesc>One or more tasks
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Executes the specified tasks if the current task fails.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:Task:reset"><apiName>reset</apiName><shortdesc>
		 
		 Resets the task to it's pre-run state.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Resets the task to it's pre-run state.
		 This allows it to be re-run.
		 This method can only be called on non-running tasks.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:Task:run"><apiName>run</apiName><shortdesc>
		 
		 Starts a task.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiOperationClassifier>com.rosettastone.library.taskmanager:ITask</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 
		 Starts a task.
		 This method will dispatch a TaskEvent.STARTED to indicate that the task has begun.
		 
		 This method may also be used to retry/resume an errored task.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:Task:protected:taskComplete"><apiName>taskComplete</apiName><shortdesc>
		 This method should be called upon Task completion.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>message</apiItemName><apiType value="String"/><apiData/><apiDesc>An (optional) message or data in string form
		 </apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="any"/><apiData>null</apiData><apiDesc>Optional data object related to the Task dispatching this event.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This method should be called upon Task completion.
		 It dispatches a TaskEvent.COMPLETE event and toggles the Tasks's "running" and "complete" states.
		 It also invokes the success handler if one has been provided.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:Task:protected:taskError"><apiName>taskError</apiName><shortdesc>
		 This method should be called upon Task failure.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>message</apiItemName><apiType value="String"/><apiData/><apiDesc>An (optional) reason for the error
		 </apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="any"/><apiData>null</apiData><apiDesc>Optional data object containing additional error information
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This method should be called upon Task failure.
		 It dispatches a TaskEvent.ERROR event and toggles the Tasks's "running" and "complete" states.
		 It also invokes the error handler if one has been provided.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:Task:protected:taskInterrupted"><apiName>taskInterrupted</apiName><shortdesc>
		 Call this method to interrupt the currently running Task.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>message</apiItemName><apiType value="String"/><apiData/><apiDesc>An (optional) reason for the interruption
		 </apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="any"/><apiData>null</apiData></apiParam></apiOperationDef><apiDesc>
		 Call this method to interrupt the currently running Task.
		 This method dispatches a TaskEvent.INTERRUPTED and toggles the tasks's "running" state.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:Task:then"><apiName>then</apiName><shortdesc>
		 
		 Executes the specified tasks once the current task has completed successfully.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>com.rosettastone.library.taskmanager:ITask</apiOperationClassifier></apiReturn><apiParam><apiItemName>chainedTasks</apiItemName><apiType value="restParam"/><apiDesc>One or more tasks
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Executes the specified tasks once the current task has completed successfully.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:Task:protected:throwErrorIfAnyObjectInArrayIsNotATask"><apiName>throwErrorIfAnyObjectInArrayIsNotATask</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>tasks</apiItemName><apiType value="Array"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:Task:withCompleteHandler"><apiName>withCompleteHandler</apiName><shortdesc>
		 
		 Although tasks dispatch TaskEvents to indicate completion, this method may also be used for notification purposes.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>com.rosettastone.library.taskmanager:ITask</apiOperationClassifier></apiReturn><apiParam><apiItemName>completeHandler</apiItemName><apiType value="Function"/><apiDesc>Function
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Although tasks dispatch TaskEvents to indicate completion, this method may also be used for notification purposes.
		 The provided function will be invoked only upon successful completion of the task.
		 
		 This method may be called multiple times safely; each unique function specified will be executed once when the task completes.
		 
		 <p>
		 It should have one of the following signatures:
		 <pre>function( message:String = "", data:= null ):void</pre>
		 <pre>function():void</pre>
		 </p>
		 		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:Task:withErrorHandler"><apiName>withErrorHandler</apiName><shortdesc>
		 
		 Although tasks dispatch TaskEvents to indicate failure, this method may also be used for notification purposes.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>com.rosettastone.library.taskmanager:ITask</apiOperationClassifier></apiReturn><apiParam><apiItemName>errorHandler</apiItemName><apiType value="Function"/><apiDesc>Function
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Although tasks dispatch TaskEvents to indicate failure, this method may also be used for notification purposes.
		 The provided function will be invoked only upon failure of the task.
		 
		 This method may be called multiple times safely; each unique function specified will be executed once if the tasks errors.
		 
		 <p>
		 It should have one of the following signatures:
		 <pre>function( message:String = "", data:= null ):void</pre>
		 <pre>function():void</pre>
		 </p>
		 		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:Task:withFinalHandler"><apiName>withFinalHandler</apiName><shortdesc>
		 
		 This handler is invoked upon either success or failure of the Task.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>com.rosettastone.library.taskmanager:ITask</apiOperationClassifier></apiReturn><apiParam><apiItemName>finalHandler</apiItemName><apiType value="Function"/></apiParam></apiOperationDef><apiDesc>
		 
		 This handler is invoked upon either success or failure of the Task.
		 It can be used for cleanup that must be done regardless of Task-status.
		 
		 <p>
		 This method may be called multiple times safely.
		 Each unique function specified will be executed once when the task is ready for cleanup.
		 </p>
		 
		 <p>
		 This type of closure should implement the following signature:
		 <pre>function():void</pre>
		 </p>
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:Task:withInterruptionHandler"><apiName>withInterruptionHandler</apiName><shortdesc>
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>com.rosettastone.library.taskmanager:ITask</apiOperationClassifier></apiReturn><apiParam><apiItemName>interruptionHandler</apiItemName><apiType value="Function"/></apiParam></apiOperationDef><apiDesc>
		 </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:Task:withStartedHandler"><apiName>withStartedHandler</apiName><shortdesc>
		 
		 Although tasks dispatch TaskEvents to indicate starting, this method may also be used for notification purposes.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>com.rosettastone.library.taskmanager:ITask</apiOperationClassifier></apiReturn><apiParam><apiItemName>startedHandler</apiItemName><apiType value="Function"/><apiDesc>Function
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Although tasks dispatch TaskEvents to indicate starting, this method may also be used for notification purposes.
		 The provided function will be invoked each time the task is started (or re-started).
		 
		 This method may be called multiple times safely; each unique function specified will be executed once when the task starts.
		 
		 <p>
		 It should have the following signature:
		 <pre>function():void</pre>
		 </p>
		 		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.rosettastone.library.taskmanager:Task:TaskPrivateNamespace:ID"><apiName>ID</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="TaskPrivateNamespace"/><apiStatic/><apiData>0</apiData><apiType value="Number"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:Task:TaskPrivateNamespace:_completeHandlers"><apiName>_completeHandlers</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="TaskPrivateNamespace"/><apiDynamic/><apiType value="Array"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:Task:TaskPrivateNamespace:_complete"><apiName>_complete</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="TaskPrivateNamespace"/><apiDynamic/><apiData>false</apiData><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:Task:TaskPrivateNamespace:_data"><apiName>_data</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="TaskPrivateNamespace"/><apiDynamic/><apiType value=""/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:Task:TaskPrivateNamespace:_errorHandlers"><apiName>_errorHandlers</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="TaskPrivateNamespace"/><apiDynamic/><apiType value="Array"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:Task:TaskPrivateNamespace:_errored"><apiName>_errored</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="TaskPrivateNamespace"/><apiDynamic/><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:Task:TaskPrivateNamespace:_finalHandlers"><apiName>_finalHandlers</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="TaskPrivateNamespace"/><apiDynamic/><apiType value="Array"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:Task:TaskPrivateNamespace:_interrupted"><apiName>_interrupted</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="TaskPrivateNamespace"/><apiDynamic/><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:Task:TaskPrivateNamespace:_interruptingTask"><apiName>_interruptingTask</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="TaskPrivateNamespace"/><apiDynamic/><apiValueClassifier>com.rosettastone.library.taskmanager:ITask</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:Task:TaskPrivateNamespace:_interruptionHandlers"><apiName>_interruptionHandlers</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="TaskPrivateNamespace"/><apiDynamic/><apiType value="Array"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:Task:TaskPrivateNamespace:_logger"><apiName>_logger</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="TaskPrivateNamespace"/><apiDynamic/><apiType value="mx.logging:ILogger"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:Task:TaskPrivateNamespace:_message"><apiName>_message</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="TaskPrivateNamespace"/><apiDynamic/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:Task:TaskPrivateNamespace:_numTimesCompleted"><apiName>_numTimesCompleted</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="TaskPrivateNamespace"/><apiDynamic/><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:Task:TaskPrivateNamespace:_numTimesErrored"><apiName>_numTimesErrored</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="TaskPrivateNamespace"/><apiDynamic/><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:Task:TaskPrivateNamespace:_numTimesInterrupted"><apiName>_numTimesInterrupted</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="TaskPrivateNamespace"/><apiDynamic/><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:Task:TaskPrivateNamespace:_numTimesReset"><apiName>_numTimesReset</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="TaskPrivateNamespace"/><apiDynamic/><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:Task:TaskPrivateNamespace:_numTimesStarted"><apiName>_numTimesStarted</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="TaskPrivateNamespace"/><apiDynamic/><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:Task:TaskPrivateNamespace:_running"><apiName>_running</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="TaskPrivateNamespace"/><apiDynamic/><apiData>false</apiData><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:Task:TaskPrivateNamespace:_startedHandlers"><apiName>_startedHandlers</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="TaskPrivateNamespace"/><apiDynamic/><apiType value="Array"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:Task:TaskPrivateNamespace:_taskHasBeenRunAtLeastOnce"><apiName>_taskHasBeenRunAtLeastOnce</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="TaskPrivateNamespace"/><apiDynamic/><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:Task:TaskPrivateNamespace:_taskIdentifier"><apiName>_taskIdentifier</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="TaskPrivateNamespace"/><apiDynamic/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:Task:TaskPrivateNamespace:_uniqueID"><apiName>_uniqueID</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="TaskPrivateNamespace"/><apiDynamic/><apiType value="Number"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:Task:data:get"><apiName>data</apiName><shortdesc>
		 
		 Optional data parameter passed to the Task complete/error/interruption method.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/></apiValueDef><apiDesc>
		 
		 Optional data parameter passed to the Task complete/error/interruption method.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:Task:id:get"><apiName>id</apiName><shortdesc>
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="com.rosettastone.library.taskmanager:Task:interruptible:get"><apiName>interruptible</apiName><shortdesc>
		 The current Task can be interrupted.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 The current Task can be interrupted.
		 Invoking interrupt() for a Task that is not marked as interruptible may result in an error.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:Task:interruptingTask:get"><apiName>interruptingTask</apiName><shortdesc>
		 The Task currently interrupting the composite Task's execution (or NULL if no such Task exists).</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>com.rosettastone.library.taskmanager:ITask</apiValueClassifier></apiValueDef><apiDesc>
		 The Task currently interrupting the composite Task's execution (or NULL if no such Task exists).
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:Task:isComplete:get"><apiName>isComplete</apiName><shortdesc>
		 
		 The current task has successfully completed execution.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 
		 The current task has successfully completed execution.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:Task:isErrored:get"><apiName>isErrored</apiName><shortdesc>
		 
		 The current task failed.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 
		 The current task failed.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:Task:isInterrupted:get"><apiName>isInterrupted</apiName><shortdesc>
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="com.rosettastone.library.taskmanager:Task:isRunning:get"><apiName>isRunning</apiName><shortdesc>
		 
		 The task is currently running.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 
		 The task is currently running.
		 This value is FALSE if the task has not been run, has completed run (succesfully or due to a failure), or has been interrupted.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:Task:protected:logger:get"><apiName>logger</apiName><shortdesc>
		 Instance of ILogger to be used for any custom Task logging.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="mx.logging:ILogger"/></apiValueDef><apiDesc>
		 Instance of ILogger to be used for any custom Task logging.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:Task:message:get"><apiName>message</apiName><shortdesc>
		 
		 Optional message parameter passed to the task complete/error/interruption method.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
		 
		 Optional message parameter passed to the task complete/error/interruption method.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:Task:numInternalOperationsCompleted:get"><apiName>numInternalOperationsCompleted</apiName><shortdesc>
		 
		 Number of internal operations that have completed.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 
		 Number of internal operations that have completed.
		 Sub-classes should override this method if containing a value &gt; 1;
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:Task:numInternalOperationsPending:get"><apiName>numInternalOperationsPending</apiName><shortdesc>
		 
		 Number of internal operations not yet completed.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 
		 Number of internal operations not yet completed.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:Task:numInternalOperations:get"><apiName>numInternalOperations</apiName><shortdesc>
		 
		 Number of internal operations conducted by this task.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 
		 Number of internal operations conducted by this task.
		 Sub-classes should override this method if containing a value &gt; 1;
		 
		 If value &gt; 1, task should dispatch ProgressEvent.PROGRESS events manually to indicate changes in numInternalOperationsCompleted.
		 If value == 1, task will automatically dispatching ProgressEvent.PROGRESS events.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:Task:numTimesCompleted:get"><apiName>numTimesCompleted</apiName><shortdesc>
		 
		 Number of times this task has completed.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 
		 Number of times this task has completed.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:Task:numTimesErrored:get"><apiName>numTimesErrored</apiName><shortdesc>
		 
		 Number of times this task has errored.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 
		 Number of times this task has errored.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:Task:numTimesInterrupted:get"><apiName>numTimesInterrupted</apiName><shortdesc>
		 
		 Number of times this task has been interrupted.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 
		 Number of times this task has been interrupted.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:Task:numTimesReset:get"><apiName>numTimesReset</apiName><shortdesc>
		 
		 Number of times this task has been reset.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 
		 Number of times this task has been reset.
		 This is the only counter that is not reset by the reset() method.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:Task:numTimesStarted:get"><apiName>numTimesStarted</apiName><shortdesc>
		 
		 Number of times this task has been started.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 
		 Number of times this task has been started.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:Task:running:get"><apiName>running</apiName><shortdesc>
		 
		 The task is currently running.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 
		 The task is currently running.
		 This value is FALSE if the task has not been run, has completed run (succesfully or due to a failure), or has been interrupted.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:Task:synchronous:get"><apiName>synchronous</apiName><shortdesc>
		 
		 The current task can be executed synchronously.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 
		 The current task can be executed synchronously.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:Task:taskIdentifier:get"><apiName>taskIdentifier</apiName><shortdesc>
		 
		 (Optional) human-readable label for task.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
		 
		 (Optional) human-readable label for task.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:Task:uniqueID:get"><apiName>uniqueID</apiName><shortdesc>
		 
		 Unique ID for a task.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 
		 Unique ID for a task.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.rosettastone.library.taskmanager:EventHandlingTask"><apiName>EventHandlingTask</apiName><shortdesc>
	 Convenience Task that listens to an IEventDispatcher for either a success or failure type event.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>com.rosettastone.library.taskmanager:InterruptibleTask</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Convenience Task that listens to an IEventDispatcher for either a success or failure type event.
	 
	 This Task can be used within a composite to block on the dispatching of an event.
	 It saves users from creating custom Tasks just to handle event listening.
	 
	 This task can be interrupted, though interrupting it will not stop (or affect) the IEventDispatcher it monitors.
	 Events dispatched while this task is in an interrupted state will be queued and handled when the task is resumed.
	 
	 If multiple Events are dispatched, only the first one will be responded-to / observed.
	 
	 Upon completion of this Task the Event that triggered the completion will be accessible via the "data" propery.
	 </apiDesc></apiClassifierDetail><apiConstructor id="com.rosettastone.library.taskmanager:EventHandlingTask:EventHandlingTask"><apiName>EventHandlingTask</apiName><shortdesc>
		 Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>eventDispatcher</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiDesc>Event dispatcher object
		 </apiDesc></apiParam><apiParam><apiItemName>successEventTypeOrTypes</apiItemName><apiType value="any"/><apiDesc>One or more event types indicating success (String or Array)
		 </apiDesc></apiParam><apiParam><apiItemName>failureEventTypeOrTypes</apiItemName><apiType value="any"/><apiData>null</apiData><apiDesc>One or more event types indicating failure (String or Array)
		 </apiDesc></apiParam><apiParam><apiItemName>taskIdentifier</apiItemName><apiType value="String"/><apiData>null</apiData></apiParam></apiConstructorDef><apiDesc>
		 Constructor.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="com.rosettastone.library.taskmanager:EventHandlingTask:protected:customInterrupt"><apiName>customInterrupt</apiName><shortdesc>
		 
		 Sub-classes should override this method to implement interruption behavior (removing event listeners, pausing objects, etc.).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Sub-classes should override this method to implement interruption behavior (removing event listeners, pausing objects, etc.).
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:EventHandlingTask:protected:customReset"><apiName>customReset</apiName><shortdesc>
		 
		 Override this method to perform any custom reset operations.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Override this method to perform any custom reset operations.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:EventHandlingTask:protected:customRun"><apiName>customRun</apiName><shortdesc>
		 
		 Override this method to give your Task functionality.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Override this method to give your Task functionality.
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="com.rosettastone.library.taskmanager:ObserverTask"><apiName>ObserverTask</apiName><shortdesc>
	 Observes (but does not execute) a collection of Tasks.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>com.rosettastone.library.taskmanager:Task</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Observes (but does not execute) a collection of Tasks.
	 This task can be used to monitor the execution of 1 or more running Tasks.
	 Tasks can be added (or removed) while the observer is running.
	 It will complete only once all observed Tasks has completed.
	 
	 If any of the observed Tasks errors, the observer will error as well if failUponError is TRUE. 
	 In this case the observer will re-dispatch the "data" and "message" properties of the first Task to fail. 
	 If failUponError is FALSE, observed Task errors and complets will be treated the same.
	 
	 If this Task is executed with no observed Tasks it will instantly complete.
	 The same is true if all of its observed Tasks have already completed by the time it has been executed.
	 </apiDesc></apiClassifierDetail><apiConstructor id="com.rosettastone.library.taskmanager:ObserverTask:ObserverTask"><apiName>ObserverTask</apiName><shortdesc>
		 Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>tasks</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>Array of Tasks to observe
		 </apiDesc></apiParam><apiParam><apiItemName>failUponError</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Controls behavior in the event of a Task error; see class documentation for more detail
		 </apiDesc></apiParam><apiParam><apiItemName>taskIdentifier</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="com.rosettastone.library.taskmanager:ObserverTask:protected:areAllObservedTasksCompletedOrErrored"><apiName>areAllObservedTasksCompletedOrErrored</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="Boolean"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:ObserverTask:protected:checkForAndHandleCompletion"><apiName>checkForAndHandleCompletion</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:ObserverTask:protected:customRun"><apiName>customRun</apiName><shortdesc>
		 
		 Override this method to give your Task functionality.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Override this method to give your Task functionality.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:ObserverTask:observeTask"><apiName>observeTask</apiName><shortdesc>
		 Add an additional Task to the set of Tasks being observed.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>taskToObserve</apiItemName><apiOperationClassifier>com.rosettastone.library.taskmanager:ITask</apiOperationClassifier></apiParam></apiOperationDef><apiDesc>
		 Add an additional Task to the set of Tasks being observed.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:ObserverTask:stopObservingTask"><apiName>stopObservingTask</apiName><shortdesc>
		 Remove the specified Task from the set of Tasks being observed.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>taskToObserve</apiItemName><apiOperationClassifier>com.rosettastone.library.taskmanager:ITask</apiOperationClassifier></apiParam></apiOperationDef><apiDesc>
		 Remove the specified Task from the set of Tasks being observed.
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.rosettastone.library.taskmanager:ObserverTask:protected:_failUponError"><apiName>_failUponError</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:ObserverTask:protected:_observedTasks"><apiName>_observedTasks</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Array"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:ObserverTask:numInternalOperationsCompleted:get"><apiName>numInternalOperationsCompleted</apiName><shortdesc>
		 
		 
		 Number of internal operations that have completed.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 
		 
		 Number of internal operations that have completed.
		 Sub-classes should override this method if containing a value &gt; 1;
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:ObserverTask:numInternalOperations:get"><apiName>numInternalOperations</apiName><shortdesc>
		 
		 
		 Number of internal operations conducted by this task.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 
		 
		 Number of internal operations conducted by this task.
		 Sub-classes should override this method if containing a value &gt; 1;
		 
		 If value &gt; 1, task should dispatch ProgressEvent.PROGRESS events manually to indicate changes in numInternalOperationsCompleted.
		 If value == 1, task will automatically dispatching ProgressEvent.PROGRESS events.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:ObserverTask:TaskPrivateNamespace:observedTasks:get"><apiName>observedTasks</apiName><shortdesc>
		 Array of Tasks currently observed by this Task.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="TaskPrivateNamespace"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
		 Array of Tasks currently observed by this Task.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.rosettastone.library.taskmanager:InterruptibleStubTask"><apiName>InterruptibleStubTask</apiName><shortdesc>
	 Interruptible stub Task primarily intended for use in the context of automated tests.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>com.rosettastone.library.taskmanager:InterruptibleTask</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Interruptible stub Task primarily intended for use in the context of automated tests.
	 This Task does nothing when run (nor when interrupted) other than increment the Task counter.
	 It can be manually completed or errored at any point using the <codeph>complete</codeph> and <codeph>error</codeph> methods.
	 </apiDesc></apiClassifierDetail><apiConstructor id="com.rosettastone.library.taskmanager:InterruptibleStubTask:InterruptibleStubTask"><apiName>InterruptibleStubTask</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>autoCompleteUponRun</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam><apiParam><apiItemName>taskIdentifier</apiItemName><apiType value="String"/><apiData>null</apiData></apiParam></apiConstructorDef></apiConstructorDetail></apiConstructor><apiOperation id="com.rosettastone.library.taskmanager:InterruptibleStubTask:complete"><apiName>complete</apiName><shortdesc>
		 Instructs Task to complete itself.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>message</apiItemName><apiType value="String"/><apiData/></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="any"/><apiData>null</apiData></apiParam></apiOperationDef><apiDesc>
		 Instructs Task to complete itself.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:InterruptibleStubTask:protected:customInterrupt"><apiName>customInterrupt</apiName><shortdesc>
		 
		 Sub-classes should override this method to implement interruption behavior (removing event listeners, pausing objects, etc.).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Sub-classes should override this method to implement interruption behavior (removing event listeners, pausing objects, etc.).
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:InterruptibleStubTask:protected:customRun"><apiName>customRun</apiName><shortdesc>
		 
		 Override this method to give your Task functionality.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Override this method to give your Task functionality.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:InterruptibleStubTask:error"><apiName>error</apiName><shortdesc>
		 Instructs Task to dispatch an error event.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>message</apiItemName><apiType value="String"/><apiData/></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="any"/><apiData>null</apiData></apiParam></apiOperationDef><apiDesc>
		 Instructs Task to dispatch an error event.
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="com.rosettastone.library.taskmanager:SynchronousTask"><apiName>SynchronousTask</apiName><shortdesc>
	 Synchronous Task for convenience sub-class purposes.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>com.rosettastone.library.taskmanager:ISynchronousTask</apiBaseInterface><apiBaseInterface>com.rosettastone.library.taskmanager:IInterruptibleTask</apiBaseInterface><apiBaseClassifier>com.rosettastone.library.taskmanager:Task</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Synchronous Task for convenience sub-class purposes.
	 </apiDesc></apiClassifierDetail><apiConstructor id="com.rosettastone.library.taskmanager:SynchronousTask:SynchronousTask"><apiName>SynchronousTask</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>taskIdentifier</apiItemName><apiType value="String"/><apiData>null</apiData></apiParam></apiConstructorDef></apiConstructorDetail></apiConstructor><apiOperation id="com.rosettastone.library.taskmanager:SynchronousTask:protected:customRunHook"><apiName>customRunHook</apiName><shortdesc>
		 Synchronous run method.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Synchronous run method.
		 Sub-classes must override this method.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:SynchronousTask:protected:customRun"><apiName>customRun</apiName><shortdesc>
		 
		 Override this method to give your Task functionality.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiFinal/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Override this method to give your Task functionality.
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.rosettastone.library.taskmanager:SynchronousTask:synchronous:get"><apiName>synchronous</apiName><shortdesc>
		 
		 The current task can be executed synchronously.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 
		 The current task can be executed synchronously.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.rosettastone.library.taskmanager:TaskWithClosure"><apiName>TaskWithClosure</apiName><shortdesc>
	 Task that invokes a specified function upon execution.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>com.rosettastone.library.taskmanager:Task</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Task that invokes a specified function upon execution.
	 The function invoked will retain the scope of where it was defined, allowing for easy access to other class/method variables.
	 
	 This type of Task can be asynchronous.
	 It will not complete (or error) until specifically instructed to do so.
	 This instruction should be triggered as a result of the custom function it executes.
	 </apiDesc></apiClassifierDetail><apiConstructor id="com.rosettastone.library.taskmanager:TaskWithClosure:TaskWithClosure"><apiName>TaskWithClosure</apiName><shortdesc>
		 Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>customRunFunction</apiItemName><apiType value="Function"/><apiData>null</apiData><apiDesc>Function to be executed when this Task is run
		 </apiDesc></apiParam><apiParam><apiItemName>autoCompleteAfterRunningFunction</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>If TRUE this Task will complete after running custom function (unless custom function called "errorTask")
		 </apiDesc></apiParam><apiParam><apiItemName>taskIdentifier</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Semantically meaningful task identifier (useful for automated testing or debugging)
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="com.rosettastone.library.taskmanager:TaskWithClosure:protected:customRun"><apiName>customRun</apiName><shortdesc>
		 
		 Override this method to give your Task functionality.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Override this method to give your Task functionality.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:TaskWithClosure:errorTask"><apiName>errorTask</apiName><shortdesc>
		 Instructs Task to dispatch an error event.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>message</apiItemName><apiType value="String"/><apiData/></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="any"/><apiData>null</apiData></apiParam></apiOperationDef><apiDesc>
		 Instructs Task to dispatch an error event.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:TaskWithClosure:finishTask"><apiName>finishTask</apiName><shortdesc>
		 Instructs Task to complete itself.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>message</apiItemName><apiType value="String"/><apiData/></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="any"/><apiData>null</apiData></apiParam></apiOperationDef><apiDesc>
		 Instructs Task to complete itself.
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.rosettastone.library.taskmanager:TaskWithClosure:autoCompleteAfterRunningFunction:get"><apiName>autoCompleteAfterRunningFunction</apiName><shortdesc>
		 If TRUE this Task will synchronously complete itself once it has invoked its custom run function.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 If TRUE this Task will synchronously complete itself once it has invoked its custom run function.
		 If an error occurs during the functions execution however the Task will not dispatch a redundant complete event.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:TaskWithClosure:customRunFunction:get"><apiName>customRunFunction</apiName><shortdesc>
		 Function to be executed when this Task is run
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
		 Function to be executed when this Task is run
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:TaskWithClosure:synchronous:get"><apiName>synchronous</apiName><shortdesc>
		 
		 
		 The current task can be executed synchronously.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 
		 
		 The current task can be executed synchronously.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.rosettastone.library.taskmanager:InterruptibleDecoratorTask"><apiName>InterruptibleDecoratorTask</apiName><shortdesc>
	 Decorates a non-interruptible Task and adds interruptible-like behavior.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>com.rosettastone.library.taskmanager:IDecoratorTask</apiBaseInterface><apiBaseClassifier>com.rosettastone.library.taskmanager:InterruptibleTask</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Decorates a non-interruptible Task and adds interruptible-like behavior.
	 This task does not actually stop and resume the decorated Task,
	 But it does prevent ERROR or COMPLETE events from being dispatched when in an interrupted state.
	 Should ERROR or COMPLETE occur while interrupted they will be re-dispatched upon resume.
	 
	 This Task-type also re-dispatches any ProgressEvents dispatched by the decorated Task.
	 </apiDesc></apiClassifierDetail><apiConstructor id="com.rosettastone.library.taskmanager:InterruptibleDecoratorTask:InterruptibleDecoratorTask"><apiName>InterruptibleDecoratorTask</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>decoratedTask</apiItemName><apiOperationClassifier>com.rosettastone.library.taskmanager:ITask</apiOperationClassifier></apiParam><apiParam><apiItemName>taskIdentifier</apiItemName><apiType value="String"/><apiData>null</apiData></apiParam></apiConstructorDef></apiConstructorDetail></apiConstructor><apiOperation id="com.rosettastone.library.taskmanager:InterruptibleDecoratorTask:protected:customInterrupt"><apiName>customInterrupt</apiName><shortdesc>
		 
		 Sub-classes should override this method to implement interruption behavior (removing event listeners, pausing objects, etc.).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Sub-classes should override this method to implement interruption behavior (removing event listeners, pausing objects, etc.).
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:InterruptibleDecoratorTask:protected:customReset"><apiName>customReset</apiName><shortdesc>
		 
		 Override this method to perform any custom reset operations.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Override this method to perform any custom reset operations.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.rosettastone.library.taskmanager:InterruptibleDecoratorTask:protected:customRun"><apiName>customRun</apiName><shortdesc>
		 
		 Override this method to give your Task functionality.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Override this method to give your Task functionality.
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.rosettastone.library.taskmanager:InterruptibleDecoratorTask:decoratedTask:get"><apiName>decoratedTask</apiName><shortdesc>
		 
		 Inner (decorated) Task.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>com.rosettastone.library.taskmanager:ITask</apiValueClassifier></apiValueDef><apiDesc>
		 
		 Inner (decorated) Task.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:InterruptibleDecoratorTask:numInternalOperationsCompleted:get"><apiName>numInternalOperationsCompleted</apiName><shortdesc>
		 
		 Number of internal operations that have completed.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 
		 Number of internal operations that have completed.
		 Sub-classes should override this method if containing a value &gt; 1;
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:InterruptibleDecoratorTask:numInternalOperations:get"><apiName>numInternalOperations</apiName><shortdesc>
		 
		 Number of internal operations conducted by this task.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 
		 Number of internal operations conducted by this task.
		 Sub-classes should override this method if containing a value &gt; 1;
		 
		 If value &gt; 1, task should dispatch ProgressEvent.PROGRESS events manually to indicate changes in numInternalOperationsCompleted.
		 If value == 1, task will automatically dispatching ProgressEvent.PROGRESS events.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.rosettastone.library.taskmanager:InterruptibleDecoratorTask:taskIdentifier:get"><apiName>taskIdentifier</apiName><shortdesc>
		 
		 (Optional) human-readable label for task.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
		 
		 (Optional) human-readable label for task.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>